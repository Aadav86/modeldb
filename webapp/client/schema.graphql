enum AccessType {
  OWNER
  READ_ONLY
  READ_WRITE
}

type AllowedActions {
  create: Boolean!
  update: Boolean!
  delete: Boolean!
  deploy: Boolean!
}

type Artifact {
  key: String!
  path: String!
  type: ArtifactType!
  pathOnly: Boolean!
}

enum ArtifactType {
  IMAGE
  MODEL
  TENSORBOARD
  DATA
  BLOB
  STRING
}

type BranchesNetwork {
  branches: [NetworkBranchColor!]!
  commits: [NetworkCommitColor!]!
  edges: [NetworkEdgeColor!]!
}

union Collaborator = UserCollaborator | TeamCollaborator
type Commit {
  id: String!
  message: String!
  date: Date!
  author: User!
  getLocation(location: [String!]!): CommitElement
  asDiff: CommitAsDiff
  runs(query: ExperimentRunsQuery): ExperimentRuns!
  setTag(name: String!): Repository!
  setBranch(name: String!): Repository!
}

type CommitAsDiff {
  parent: String!
  diff: [String!]
}

type CommitBlob {
  content: String!
  runs(query: ExperimentRunsQuery): ExperimentRuns!
}

union CommitElement = CommitFolder | CommitBlob
type CommitFolder {
  subfolders: [NamedCommitFolder!]!
  blobs: [NamedCommitBlob!]!
}

input CommitReference {
  commit: ID
  tag: String
  branch: String
}

type Commits {
  commits: [Commit!]!
}

scalar Date

type Experiment {
  id: ID!
  projectId: String!
  project: Project!
  name: String!
  description: String!
  dateCreated: Date!
  dateUpdated: Date!
  attributes: [KeyValue!]!
  tags: [String!]!
  owner: User!
  runs(next: String, query: ExperimentRunsQuery): ExperimentRuns!
}

type ExperimentRun {
  id: ID!
  projectId: String!
  project: Project!
  experimentId: String!
  experiment: Experiment!
  name: String!
  description: String!
  dateCreated: Date!
  dateUpdated: Date!
  attributes: [KeyValue!]!
  tags: [String!]!
  hyperparameters: [KeyValue!]!
  artifacts: [Artifact!]!
  datasets: [Artifact!]!
  metrics: [KeyValue!]!
  observations: [Observation!]!
  features: [Feature!]!
  jobId: String
  owner: User!
  codeVersion: String
}

type ExperimentRuns {
  runs: [ExperimentRun!]!
  next: String
  pagination: PaginationResponse!
}

input ExperimentRunsQuery {
  pagination: PaginationQuery
}

type Experiments {
  experiments: [Experiment!]!
  next: String
}

input ExperimentsQuery {
  pagination: PaginationQuery
}

type Feature {
  name: String
}

type FloatKeyValue {
  key: String!
  value: Float!
}

union KeyValue = StringKeyValue | FloatKeyValue
type MergeResult {
  commit: Commit
  commonBase: Commit
  conflicts: [String!]
}

type Mutation {
  editRunDescription(id: ID!, description: String!): ExperimentRun
  addRunTag(id: ID!, tag: String!): ExperimentRun
  delRunTag(id: ID!, tag: String!): ExperimentRun
  setCollaboratorProject(
    projid: ID!
    email: String!
    type: AccessType!
  ): Project
  delCollaboratorProject(projid: ID!, collid: ID!): Project
  editProjectDescription(id: ID!, description: String!): Project
  editProjectReadme(id: ID!, readme: String!): Project
  addProjectTag(id: ID!, tag: String!): Project
  delProjectTag(id: ID!, tag: String!): Project
  delProject(id: ID!): Boolean!
  repository(id: ID!): Repository
  workspace(name: String): Workspace
}

type NamedCommitBlob {
  name: String!
  content: CommitBlob!
}

type NamedCommitFolder {
  name: String!
  content: CommitFolder!
}

type NetworkBranchColor {
  branch: String!
  color: Int!
  commitIndex: Int!
}

type NetworkCommitColor {
  commit: Commit!
  color: Int!
}

type NetworkEdgeColor {
  fromCommitIndex: Int!
  toCommitIndex: Int!
  color: Int!
  edgeType: NetworkEdgeType!
}

enum NetworkEdgeType {
  DEFAULT
  BRANCH
  MERGE
}

type Observation {
  attribute: KeyValue
  artifact: Artifact
  timestamp: Date
}

type Organization {
  id: ID!
  name: String!
  shortName: String!
  description: String!
  owner: User!
  dateCreated: Date!
  dateUpdated: Date!
  teams: [Team!]!
}

input PaginationQuery {
  page: Int
  limit: Int
}

type PaginationResponse {
  page: Int!
  limit: Int!
  totalRecords: Int!
}

type Project {
  id: ID!
  name: String!
  description: String!
  dateCreated: Date!
  dateUpdated: Date!
  shortName: String!
  readmeText: String!
  projectVisibility: ProjectVisibility!
  access: AccessType!
  attributes: [KeyValue!]!
  tags: [String!]!
  owner: User!
  collaborators: [Collaborator!]!
  experiments(next: String, query: ExperimentsQuery): Experiments!
  runs(next: String, query: ExperimentRunsQuery): ExperimentRuns!
}

type Projects {
  projects: [Project!]!
  next: String
}

input ProjectsQuery {
  pagination: PaginationQuery
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
}

type Query {
  organizations: [Organization!]!
  teams: [Team!]!
  self: User
  project(id: ID!): Project
  experiment(id: ID!): Experiment
  run(id: ID!): ExperimentRun
  repository(id: ID!): Repository
  organization(id: ID!): Organization
  workspace(name: String): Workspace
}

type Repositories {
  repositories: [Repository!]!
  next: String
  pagination: PaginationResponse!
}

input RepositoriesQuery {
  pagination: PaginationQuery
}

type Repository {
  id: ID!
  name: String!
  dateCreated: Date!
  dateUpdated: Date!
  labels: [String!]!
  owner: User!
  collaborators: [Collaborator!]!
  allowedActions: AllowedActions!
  tags: [RepositoryTag!]!
  branches: [RepositoryBranch!]!
  commit(id: ID!): Commit
  tag(name: String!): Commit
  branch(name: String!): Commit
  commitByReference(ref: CommitReference!): Commit
  diff(a: CommitReference!, b: CommitReference!): [String!]
  log(commit: CommitReference!): Commits!
  network: BranchesNetwork!
  delete: Boolean!
  addLabels(labels: [String!]!): Repository!
  deleteLabels(labels: [String!]!): Repository!
  merge(a: CommitReference!, b: CommitReference!, message: String): MergeResult!
}

type RepositoryBranch {
  name: String!
  commit: Commit!
}

type RepositoryTag {
  name: String!
  commit: Commit!
}

type StringKeyValue {
  key: String!
  value: String!
}

type Team {
  id: ID!
  organizationId: String!
  organization: Organization!
  name: String!
  shortName: String!
  description: String!
  owner: User!
  dateCreated: Date!
  dateUpdated: Date!
}

type TeamCollaborator {
  team: Team!
  type: AccessType!
  canDeploy: Boolean!
}

type User {
  id: ID!
  name: String
  email: String!
  picture: String
  roles: [String!]!
  username: String!
}

type UserCollaborator {
  user: User!
  type: AccessType!
  canDeploy: Boolean!
}

enum Visibility {
  PRIVATE
  PUBLIC
  ORG_SCOPED_PUBLIC
}

type Workspace {
  name: String!
  projects(next: String, query: ProjectsQuery): Projects!
  repositories(next: String, query: RepositoriesQuery): Repositories!
  repository(name: String!): Repository
  createRepository(name: String!, visibility: Visibility!): Repository
}

