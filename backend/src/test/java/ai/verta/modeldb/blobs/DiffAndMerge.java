/*
package ai.verta.modeldb.blobs;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import com.pholser.junit.quickcheck.From;
import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.When;
import com.pholser.junit.quickcheck.generator.Fields;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

import java.util.regex.Pattern;

import static ai.verta.modeldb.blobs.Utils.enforceOneof;
import static org.junit.Assert.*;
import static org.junit.Assume.*;

@RunWith(JUnitQuickcheck.class)
public class DiffAndMerge {
    @Property public void diffAndMerge(Blob a, Blob b) throws ModelDBException {
        Blob newA = enforceOneof(a);
        Blob newB = enforceOneof(b);
        BlobDiff d = DiffComputer.computeBlobDiff(newA, newB);
        Blob diffedB = DiffMerger.mergeBlob(newA, d);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeCode(CodeBlob a, CodeBlob b) throws ModelDBException {
        System.out.println("");
        CodeBlob newA = Utils.sortLists(enforceOneof(a));
        CodeBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        CodeDiff d = DiffComputer.computeCodeDiff(newA, newB);
        System.out.println(d);
        CodeBlob diffedB = Utils.sortLists(DiffMerger.mergeCode(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeConfig(ConfigBlob a, ConfigBlob b) throws ModelDBException {
        System.out.println("");
        ConfigBlob newA = Utils.sortLists(enforceOneof(a));
        ConfigBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        ConfigDiff d = DiffComputer.computeConfigDiff(newA, newB);
        System.out.println(d);
        ConfigBlob diffedB = Utils.sortLists(DiffMerger.mergeConfig(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeDataset(DatasetBlob a, DatasetBlob b) throws ModelDBException {
        System.out.println("");
        DatasetBlob newA = Utils.sortLists(enforceOneof(a));
        DatasetBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        DatasetDiff d = DiffComputer.computeDatasetDiff(newA, newB);
        System.out.println(d);
        DatasetBlob diffedB = Utils.sortLists(DiffMerger.mergeDataset(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeDockerEnvironment(DockerEnvironmentBlob a, DockerEnvironmentBlob b) throws ModelDBException {
        System.out.println("");
        DockerEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
        DockerEnvironmentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        DockerEnvironmentDiff d = DiffComputer.computeDockerEnvironmentDiff(newA, newB);
        System.out.println(d);
        DockerEnvironmentBlob diffedB = Utils.sortLists(DiffMerger.mergeDockerEnvironment(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeEnvironment(EnvironmentBlob a, EnvironmentBlob b) throws ModelDBException {
        System.out.println("");
        EnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
        EnvironmentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        EnvironmentDiff d = DiffComputer.computeEnvironmentDiff(newA, newB);
        System.out.println(d);
        EnvironmentBlob diffedB = Utils.sortLists(DiffMerger.mergeEnvironment(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeEnvironmentVariables(EnvironmentVariablesBlob a, EnvironmentVariablesBlob b) throws ModelDBException {
        System.out.println("");
        EnvironmentVariablesBlob newA = Utils.sortLists(enforceOneof(a));
        EnvironmentVariablesBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        EnvironmentVariablesDiff d = DiffComputer.computeEnvironmentVariablesDiff(newA, newB);
        System.out.println(d);
        EnvironmentVariablesBlob diffedB = Utils.sortLists(DiffMerger.mergeEnvironmentVariables(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeGitCode(GitCodeBlob a, GitCodeBlob b) throws ModelDBException {
        System.out.println("");
        GitCodeBlob newA = Utils.sortLists(enforceOneof(a));
        GitCodeBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        GitCodeDiff d = DiffComputer.computeGitCodeDiff(newA, newB);
        System.out.println(d);
        GitCodeBlob diffedB = Utils.sortLists(DiffMerger.mergeGitCode(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeHyperparameterConfig(HyperparameterConfigBlob a, HyperparameterConfigBlob b) throws ModelDBException {
        System.out.println("");
        HyperparameterConfigBlob newA = Utils.sortLists(enforceOneof(a));
        HyperparameterConfigBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        HyperparameterConfigDiff d = DiffComputer.computeHyperparameterConfigDiff(newA, newB);
        System.out.println(d);
        HyperparameterConfigBlob diffedB = Utils.sortLists(DiffMerger.mergeHyperparameterConfig(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeHyperparameterSetConfig(HyperparameterSetConfigBlob a, HyperparameterSetConfigBlob b) throws ModelDBException {
        System.out.println("");
        HyperparameterSetConfigBlob newA = Utils.sortLists(enforceOneof(a));
        HyperparameterSetConfigBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        HyperparameterSetConfigDiff d = DiffComputer.computeHyperparameterSetConfigDiff(newA, newB);
        System.out.println(d);
        HyperparameterSetConfigBlob diffedB = Utils.sortLists(DiffMerger.mergeHyperparameterSetConfig(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeNotebookCode(NotebookCodeBlob a, NotebookCodeBlob b) throws ModelDBException {
        System.out.println("");
        NotebookCodeBlob newA = Utils.sortLists(enforceOneof(a));
        NotebookCodeBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        NotebookCodeDiff d = DiffComputer.computeNotebookCodeDiff(newA, newB);
        System.out.println(d);
        NotebookCodeBlob diffedB = Utils.sortLists(DiffMerger.mergeNotebookCode(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergePathDataset(PathDatasetBlob a, PathDatasetBlob b) throws ModelDBException {
        System.out.println("");
        PathDatasetBlob newA = Utils.sortLists(enforceOneof(a));
        PathDatasetBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        PathDatasetDiff d = DiffComputer.computePathDatasetDiff(newA, newB);
        System.out.println(d);
        PathDatasetBlob diffedB = Utils.sortLists(DiffMerger.mergePathDataset(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergePathDatasetComponent(PathDatasetComponentBlob a, PathDatasetComponentBlob b) throws ModelDBException {
        System.out.println("");
        PathDatasetComponentBlob newA = Utils.sortLists(enforceOneof(a));
        PathDatasetComponentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        PathDatasetComponentDiff d = DiffComputer.computePathDatasetComponentDiff(newA, newB);
        System.out.println(d);
        PathDatasetComponentBlob diffedB = Utils.sortLists(DiffMerger.mergePathDatasetComponent(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergePythonEnvironment(PythonEnvironmentBlob a, PythonEnvironmentBlob b) throws ModelDBException {
        System.out.println("");
        PythonEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
        PythonEnvironmentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        PythonEnvironmentDiff d = DiffComputer.computePythonEnvironmentDiff(newA, newB);
        System.out.println(d);
        PythonEnvironmentBlob diffedB = Utils.sortLists(DiffMerger.mergePythonEnvironment(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergePythonRequirementEnvironment(PythonRequirementEnvironmentBlob a, PythonRequirementEnvironmentBlob b) throws ModelDBException {
        System.out.println("");
        PythonRequirementEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
        PythonRequirementEnvironmentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        PythonRequirementEnvironmentDiff d = DiffComputer.computePythonRequirementEnvironmentDiff(newA, newB);
        System.out.println(d);
        PythonRequirementEnvironmentBlob diffedB = Utils.sortLists(DiffMerger.mergePythonRequirementEnvironment(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeS3Dataset(S3DatasetBlob a, S3DatasetBlob b) throws ModelDBException {
        System.out.println("");
        S3DatasetBlob newA = Utils.sortLists(enforceOneof(a));
        S3DatasetBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        S3DatasetDiff d = DiffComputer.computeS3DatasetDiff(newA, newB);
        System.out.println(d);
        S3DatasetBlob diffedB = Utils.sortLists(DiffMerger.mergeS3Dataset(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeS3DatasetComponent(S3DatasetComponentBlob a, S3DatasetComponentBlob b) throws ModelDBException {
        System.out.println("");
        S3DatasetComponentBlob newA = Utils.sortLists(enforceOneof(a));
        S3DatasetComponentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        S3DatasetComponentDiff d = DiffComputer.computeS3DatasetComponentDiff(newA, newB);
        System.out.println(d);
        S3DatasetComponentBlob diffedB = Utils.sortLists(DiffMerger.mergeS3DatasetComponent(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

    @Property public void diffAndMergeVersionEnvironment(VersionEnvironmentBlob a, VersionEnvironmentBlob b) throws ModelDBException {
        System.out.println("");
        VersionEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
        VersionEnvironmentBlob newB = Utils.sortLists(enforceOneof(b));
        System.out.println(newA);
        System.out.println(newB);
        VersionEnvironmentDiff d = DiffComputer.computeVersionEnvironmentDiff(newA, newB);
        System.out.println(d);
        VersionEnvironmentBlob diffedB = Utils.sortLists(DiffMerger.mergeVersionEnvironment(newA, d));
        System.out.println(diffedB);
        assertEquals(newB, diffedB);
    }

}
*/
