package ai.verta.modeldb.blobs;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import com.pholser.junit.quickcheck.From;
import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.When;
import com.pholser.junit.quickcheck.generator.Fields;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

import java.util.regex.Pattern;

import static org.junit.Assert.*;
import static org.junit.Assume.*;

@RunWith(JUnitQuickcheck.class)
public class BlobEquality {
    @Property public void equality(Blob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(CodeBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(ConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(ContinuousHyperparameterSetConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(DatasetBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(DiscreteHyperparameterSetConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(DockerEnvironmentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(EnvironmentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(EnvironmentVariablesBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(GitCodeBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(HyperparameterConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(HyperparameterSetConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(HyperparameterValuesConfigBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(NotebookCodeBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(PathDatasetBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(PathDatasetComponentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(PythonEnvironmentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(PythonRequirementEnvironmentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(S3DatasetBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(S3DatasetComponentBlob b) {
        assertTrue(b.equals(b));
    }

    @Property public void equality(VersionEnvironmentBlob b) {
        assertTrue(b.equals(b));
    }

}
