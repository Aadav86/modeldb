// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class EnvironmentVariablesDiff implements ProtoType {
  public Optional<DiffStatusEnumDiffStatus> Status;
  public Optional<String> Name;
  public Optional<String> ValueA;
  public Optional<String> ValueB;

  public EnvironmentVariablesDiff() {
    this.Status = Optional.empty();
    this.Name = Optional.empty();
    this.ValueA = Optional.empty();
    this.ValueB = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Status.isPresent()) {
      return false;
    }
    if (this.Name.isPresent()) {
      return false;
    }
    if (this.ValueA.isPresent()) {
      return false;
    }
    if (this.ValueB.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof EnvironmentVariablesDiff)) return false;
    EnvironmentVariablesDiff other = (EnvironmentVariablesDiff) o;

    {
      Function3<DiffStatusEnumDiffStatus, DiffStatusEnumDiffStatus, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.Status.isPresent() || other.Status.isPresent()) {
        if (!this.Status.isPresent()) return false;
        if (other.Status.isPresent()) return false;
        if (!f.apply(this.Status.get(), other.Status.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Name.isPresent() || other.Name.isPresent()) {
        if (!this.Name.isPresent()) return false;
        if (other.Name.isPresent()) return false;
        if (!f.apply(this.Name.get(), other.Name.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.ValueA.isPresent() || other.ValueA.isPresent()) {
        if (!this.ValueA.isPresent()) return false;
        if (other.ValueA.isPresent()) return false;
        if (!f.apply(this.ValueA.get(), other.ValueA.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.ValueB.isPresent() || other.ValueB.isPresent()) {
        if (!this.ValueB.isPresent()) return false;
        if (other.ValueB.isPresent()) return false;
        if (!f.apply(this.ValueB.get(), other.ValueB.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Status, this.Name, this.ValueA, this.ValueB);
  }

  public EnvironmentVariablesDiff setStatus(Optional<DiffStatusEnumDiffStatus> value) {
    this.Status = value;
    return this;
  }

  public EnvironmentVariablesDiff setStatus(DiffStatusEnumDiffStatus value) {
    if (value == null) this.Status = Optional.empty();
    else this.Status = Optional.of(value);
    return this;
  }

  public EnvironmentVariablesDiff setName(Optional<String> value) {
    this.Name = value;
    return this;
  }

  public EnvironmentVariablesDiff setName(String value) {
    if (value == null) this.Name = Optional.empty();
    else this.Name = Optional.of(value);
    return this;
  }

  public EnvironmentVariablesDiff setValueA(Optional<String> value) {
    this.ValueA = value;
    return this;
  }

  public EnvironmentVariablesDiff setValueA(String value) {
    if (value == null) this.ValueA = Optional.empty();
    else this.ValueA = Optional.of(value);
    return this;
  }

  public EnvironmentVariablesDiff setValueB(Optional<String> value) {
    this.ValueB = value;
    return this;
  }

  public EnvironmentVariablesDiff setValueB(String value) {
    if (value == null) this.ValueB = Optional.empty();
    else this.ValueB = Optional.of(value);
    return this;
  }

  public static EnvironmentVariablesDiff fromProto(
      ai.verta.modeldb.versioning.EnvironmentVariablesDiff blob) {
    if (blob == null) {
      return null;
    }

    EnvironmentVariablesDiff obj = new EnvironmentVariablesDiff();
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesDiff, DiffStatusEnumDiffStatus> f =
          x -> DiffStatusEnumDiffStatus.fromProto(blob.getStatus());
      obj.Status = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesDiff, String> f =
          x -> (blob.getName());
      obj.Name = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesDiff, String> f =
          x -> (blob.getValueA());
      obj.ValueA = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesDiff, String> f =
          x -> (blob.getValueB());
      obj.ValueB = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.EnvironmentVariablesDiff.Builder toProto() {
    ai.verta.modeldb.versioning.EnvironmentVariablesDiff.Builder builder =
        ai.verta.modeldb.versioning.EnvironmentVariablesDiff.newBuilder();
    this.Status.ifPresent(x -> builder.setStatus(x.toProto()));
    this.Name.ifPresent(x -> builder.setName(x));
    this.ValueA.ifPresent(x -> builder.setValueA(x));
    this.ValueB.ifPresent(x -> builder.setValueB(x));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitEnvironmentVariablesDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Status.isPresent()) visitor.preVisitDeepDiffStatusEnumDiffStatus(this.Status.get());
    if (this.Name.isPresent()) visitor.preVisitDeepString(this.Name.get());
    if (this.ValueA.isPresent()) visitor.preVisitDeepString(this.ValueA.get());
    if (this.ValueB.isPresent()) visitor.preVisitDeepString(this.ValueB.get());
  }

  public EnvironmentVariablesDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitEnvironmentVariablesDiff(this);
  }

  public EnvironmentVariablesDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Status.isPresent())
      this.setStatus(visitor.postVisitDeepDiffStatusEnumDiffStatus(this.Status.get()));
    if (this.Name.isPresent()) this.setName(visitor.postVisitDeepString(this.Name.get()));
    if (this.ValueA.isPresent()) this.setValueA(visitor.postVisitDeepString(this.ValueA.get()));
    if (this.ValueB.isPresent()) this.setValueB(visitor.postVisitDeepString(this.ValueB.get()));
    return this.postVisitShallow(visitor);
  }
}
