// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class HyperparameterSetConfigBlob implements ProtoType {
  public Optional<String> Name;
  public Optional<ContinuousHyperparameterSetConfigBlob> Continuous;
  public Optional<DiscreteHyperparameterSetConfigBlob> Discrete;

  public HyperparameterSetConfigBlob() {
    this.Name = Optional.empty();
    this.Continuous = Optional.empty();
    this.Discrete = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Name.isPresent()) {
      return false;
    }
    if (this.Continuous.isPresent()) {
      return false;
    }
    if (this.Discrete.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof HyperparameterSetConfigBlob)) return false;
    HyperparameterSetConfigBlob other = (HyperparameterSetConfigBlob) o;

    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Name.isPresent() || other.Name.isPresent()) {
        if (!this.Name.isPresent()) return false;
        if (other.Name.isPresent()) return false;
        if (!f.apply(this.Name.get(), other.Name.get())) return false;
      }
    }
    {
      Function3<
              ContinuousHyperparameterSetConfigBlob, ContinuousHyperparameterSetConfigBlob, Boolean>
          f = (x, y) -> x.equals(y);
      if (this.Continuous.isPresent() || other.Continuous.isPresent()) {
        if (!this.Continuous.isPresent()) return false;
        if (other.Continuous.isPresent()) return false;
        if (!f.apply(this.Continuous.get(), other.Continuous.get())) return false;
      }
    }
    {
      Function3<DiscreteHyperparameterSetConfigBlob, DiscreteHyperparameterSetConfigBlob, Boolean>
          f = (x, y) -> x.equals(y);
      if (this.Discrete.isPresent() || other.Discrete.isPresent()) {
        if (!this.Discrete.isPresent()) return false;
        if (other.Discrete.isPresent()) return false;
        if (!f.apply(this.Discrete.get(), other.Discrete.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Name, this.Continuous, this.Discrete);
  }

  public HyperparameterSetConfigBlob setName(Optional<String> value) {
    this.Name = value;
    return this;
  }

  public HyperparameterSetConfigBlob setName(String value) {
    if (value == null) this.Name = Optional.empty();
    else this.Name = Optional.of(value);
    return this;
  }

  public HyperparameterSetConfigBlob setContinuous(
      Optional<ContinuousHyperparameterSetConfigBlob> value) {
    this.Continuous = value;
    return this;
  }

  public HyperparameterSetConfigBlob setContinuous(ContinuousHyperparameterSetConfigBlob value) {
    if (value == null) this.Continuous = Optional.empty();
    else this.Continuous = Optional.of(value);
    return this;
  }

  public HyperparameterSetConfigBlob setDiscrete(
      Optional<DiscreteHyperparameterSetConfigBlob> value) {
    this.Discrete = value;
    return this;
  }

  public HyperparameterSetConfigBlob setDiscrete(DiscreteHyperparameterSetConfigBlob value) {
    if (value == null) this.Discrete = Optional.empty();
    else this.Discrete = Optional.of(value);
    return this;
  }

  public static HyperparameterSetConfigBlob fromProto(
      ai.verta.modeldb.versioning.HyperparameterSetConfigBlob blob) {
    if (blob == null) {
      return null;
    }

    HyperparameterSetConfigBlob obj = new HyperparameterSetConfigBlob();
    {
      Function<ai.verta.modeldb.versioning.HyperparameterSetConfigBlob, String> f =
          x -> (blob.getName());
      obj.Name = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.HyperparameterSetConfigBlob,
              ContinuousHyperparameterSetConfigBlob>
          f = x -> ContinuousHyperparameterSetConfigBlob.fromProto(blob.getContinuous());
      obj.Continuous = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.HyperparameterSetConfigBlob,
              DiscreteHyperparameterSetConfigBlob>
          f = x -> DiscreteHyperparameterSetConfigBlob.fromProto(blob.getDiscrete());
      obj.Discrete = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder toProto() {
    ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder builder =
        ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.newBuilder();
    this.Name.ifPresent(x -> builder.setName(x));
    this.Continuous.ifPresent(x -> builder.setContinuous(x.toProto()));
    this.Discrete.ifPresent(x -> builder.setDiscrete(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitHyperparameterSetConfigBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Name.isPresent()) visitor.preVisitDeepString(this.Name.get());
    if (this.Continuous.isPresent())
      visitor.preVisitDeepContinuousHyperparameterSetConfigBlob(this.Continuous.get());
    if (this.Discrete.isPresent())
      visitor.preVisitDeepDiscreteHyperparameterSetConfigBlob(this.Discrete.get());
  }

  public HyperparameterSetConfigBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitHyperparameterSetConfigBlob(this);
  }

  public HyperparameterSetConfigBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Name.isPresent()) this.setName(visitor.postVisitDeepString(this.Name.get()));
    if (this.Continuous.isPresent())
      this.setContinuous(
          visitor.postVisitDeepContinuousHyperparameterSetConfigBlob(this.Continuous.get()));
    if (this.Discrete.isPresent())
      this.setDiscrete(
          visitor.postVisitDeepDiscreteHyperparameterSetConfigBlob(this.Discrete.get()));
    return this.postVisitShallow(visitor);
  }
}
