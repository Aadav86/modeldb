// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class PythonRequirementEnvironmentBlob implements ProtoType {
  public Optional<String> Library;
  public Optional<String> Constraint;
  public Optional<VersionEnvironmentBlob> Version;

  public PythonRequirementEnvironmentBlob() {
    this.Library = Optional.empty();
    this.Constraint = Optional.empty();
    this.Version = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Library.isPresent()) {
      return false;
    }
    if (this.Constraint.isPresent()) {
      return false;
    }
    if (this.Version.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof PythonRequirementEnvironmentBlob)) return false;
    PythonRequirementEnvironmentBlob other = (PythonRequirementEnvironmentBlob) o;

    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Library.isPresent() || other.Library.isPresent()) {
        if (!this.Library.isPresent()) return false;
        if (other.Library.isPresent()) return false;
        if (!f.apply(this.Library.get(), other.Library.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Constraint.isPresent() || other.Constraint.isPresent()) {
        if (!this.Constraint.isPresent()) return false;
        if (other.Constraint.isPresent()) return false;
        if (!f.apply(this.Constraint.get(), other.Constraint.get())) return false;
      }
    }
    {
      Function3<VersionEnvironmentBlob, VersionEnvironmentBlob, Boolean> f = (x, y) -> x.equals(y);
      if (this.Version.isPresent() || other.Version.isPresent()) {
        if (!this.Version.isPresent()) return false;
        if (other.Version.isPresent()) return false;
        if (!f.apply(this.Version.get(), other.Version.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Library, this.Constraint, this.Version);
  }

  public PythonRequirementEnvironmentBlob setLibrary(Optional<String> value) {
    this.Library = value;
    return this;
  }

  public PythonRequirementEnvironmentBlob setLibrary(String value) {
    if (value == null) this.Library = Optional.empty();
    else this.Library = Optional.of(value);
    return this;
  }

  public PythonRequirementEnvironmentBlob setConstraint(Optional<String> value) {
    this.Constraint = value;
    return this;
  }

  public PythonRequirementEnvironmentBlob setConstraint(String value) {
    if (value == null) this.Constraint = Optional.empty();
    else this.Constraint = Optional.of(value);
    return this;
  }

  public PythonRequirementEnvironmentBlob setVersion(Optional<VersionEnvironmentBlob> value) {
    this.Version = value;
    return this;
  }

  public PythonRequirementEnvironmentBlob setVersion(VersionEnvironmentBlob value) {
    if (value == null) this.Version = Optional.empty();
    else this.Version = Optional.of(value);
    return this;
  }

  public static PythonRequirementEnvironmentBlob fromProto(
      ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob blob) {
    if (blob == null) {
      return null;
    }

    PythonRequirementEnvironmentBlob obj = new PythonRequirementEnvironmentBlob();
    {
      Function<ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob, String> f =
          x -> (blob.getLibrary());
      obj.Library = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob, String> f =
          x -> (blob.getConstraint());
      obj.Constraint = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob, VersionEnvironmentBlob>
          f = x -> VersionEnvironmentBlob.fromProto(blob.getVersion());
      obj.Version = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob.Builder toProto() {
    ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob.Builder builder =
        ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob.newBuilder();
    this.Library.ifPresent(x -> builder.setLibrary(x));
    this.Constraint.ifPresent(x -> builder.setConstraint(x));
    this.Version.ifPresent(x -> builder.setVersion(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitPythonRequirementEnvironmentBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Library.isPresent()) visitor.preVisitDeepString(this.Library.get());
    if (this.Constraint.isPresent()) visitor.preVisitDeepString(this.Constraint.get());
    if (this.Version.isPresent()) visitor.preVisitDeepVersionEnvironmentBlob(this.Version.get());
  }

  public PythonRequirementEnvironmentBlob postVisitShallow(Visitor visitor)
      throws ModelDBException {
    return visitor.postVisitPythonRequirementEnvironmentBlob(this);
  }

  public PythonRequirementEnvironmentBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Library.isPresent()) this.setLibrary(visitor.postVisitDeepString(this.Library.get()));
    if (this.Constraint.isPresent())
      this.setConstraint(visitor.postVisitDeepString(this.Constraint.get()));
    if (this.Version.isPresent())
      this.setVersion(visitor.postVisitDeepVersionEnvironmentBlob(this.Version.get()));
    return this.postVisitShallow(visitor);
  }
}
