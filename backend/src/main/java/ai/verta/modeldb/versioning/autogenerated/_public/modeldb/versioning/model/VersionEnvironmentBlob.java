// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class VersionEnvironmentBlob implements ProtoType {
  public Optional<Integer> Major;
  public Optional<Integer> Minor;
  public Optional<Integer> Patch;
  public Optional<String> Suffix;

  public VersionEnvironmentBlob() {
    this.Major = Optional.empty();
    this.Minor = Optional.empty();
    this.Patch = Optional.empty();
    this.Suffix = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Major.isPresent()) {
      return false;
    }
    if (this.Minor.isPresent()) {
      return false;
    }
    if (this.Patch.isPresent()) {
      return false;
    }
    if (this.Suffix.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof VersionEnvironmentBlob)) return false;
    VersionEnvironmentBlob other = (VersionEnvironmentBlob) o;

    {
      Function3<Integer, Integer, Boolean> f = (x, y) -> x == y;
      if (this.Major.isPresent() || other.Major.isPresent()) {
        if (!this.Major.isPresent()) return false;
        if (other.Major.isPresent()) return false;
        if (!f.apply(this.Major.get(), other.Major.get())) return false;
      }
    }
    {
      Function3<Integer, Integer, Boolean> f = (x, y) -> x == y;
      if (this.Minor.isPresent() || other.Minor.isPresent()) {
        if (!this.Minor.isPresent()) return false;
        if (other.Minor.isPresent()) return false;
        if (!f.apply(this.Minor.get(), other.Minor.get())) return false;
      }
    }
    {
      Function3<Integer, Integer, Boolean> f = (x, y) -> x == y;
      if (this.Patch.isPresent() || other.Patch.isPresent()) {
        if (!this.Patch.isPresent()) return false;
        if (other.Patch.isPresent()) return false;
        if (!f.apply(this.Patch.get(), other.Patch.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Suffix.isPresent() || other.Suffix.isPresent()) {
        if (!this.Suffix.isPresent()) return false;
        if (other.Suffix.isPresent()) return false;
        if (!f.apply(this.Suffix.get(), other.Suffix.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Major, this.Minor, this.Patch, this.Suffix);
  }

  public VersionEnvironmentBlob setMajor(Optional<Integer> value) {
    this.Major = value;
    return this;
  }

  public VersionEnvironmentBlob setMajor(Integer value) {
    if (value == null) this.Major = Optional.empty();
    else this.Major = Optional.of(value);
    return this;
  }

  public VersionEnvironmentBlob setMinor(Optional<Integer> value) {
    this.Minor = value;
    return this;
  }

  public VersionEnvironmentBlob setMinor(Integer value) {
    if (value == null) this.Minor = Optional.empty();
    else this.Minor = Optional.of(value);
    return this;
  }

  public VersionEnvironmentBlob setPatch(Optional<Integer> value) {
    this.Patch = value;
    return this;
  }

  public VersionEnvironmentBlob setPatch(Integer value) {
    if (value == null) this.Patch = Optional.empty();
    else this.Patch = Optional.of(value);
    return this;
  }

  public VersionEnvironmentBlob setSuffix(Optional<String> value) {
    this.Suffix = value;
    return this;
  }

  public VersionEnvironmentBlob setSuffix(String value) {
    if (value == null) this.Suffix = Optional.empty();
    else this.Suffix = Optional.of(value);
    return this;
  }

  public static VersionEnvironmentBlob fromProto(
      ai.verta.modeldb.versioning.VersionEnvironmentBlob blob) {
    if (blob == null) {
      return null;
    }

    VersionEnvironmentBlob obj = new VersionEnvironmentBlob();
    {
      Function<ai.verta.modeldb.versioning.VersionEnvironmentBlob, Integer> f =
          x -> (blob.getMajor());
      obj.Major = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.VersionEnvironmentBlob, Integer> f =
          x -> (blob.getMinor());
      obj.Minor = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.VersionEnvironmentBlob, Integer> f =
          x -> (blob.getPatch());
      obj.Patch = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.VersionEnvironmentBlob, String> f =
          x -> (blob.getSuffix());
      obj.Suffix = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.VersionEnvironmentBlob.Builder toProto() {
    ai.verta.modeldb.versioning.VersionEnvironmentBlob.Builder builder =
        ai.verta.modeldb.versioning.VersionEnvironmentBlob.newBuilder();
    this.Major.ifPresent(x -> builder.setMajor(x));
    this.Minor.ifPresent(x -> builder.setMinor(x));
    this.Patch.ifPresent(x -> builder.setPatch(x));
    this.Suffix.ifPresent(x -> builder.setSuffix(x));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitVersionEnvironmentBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Major.isPresent()) visitor.preVisitDeepInteger(this.Major.get());
    if (this.Minor.isPresent()) visitor.preVisitDeepInteger(this.Minor.get());
    if (this.Patch.isPresent()) visitor.preVisitDeepInteger(this.Patch.get());
    if (this.Suffix.isPresent()) visitor.preVisitDeepString(this.Suffix.get());
  }

  public VersionEnvironmentBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitVersionEnvironmentBlob(this);
  }

  public VersionEnvironmentBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Major.isPresent()) this.setMajor(visitor.postVisitDeepInteger(this.Major.get()));
    if (this.Minor.isPresent()) this.setMinor(visitor.postVisitDeepInteger(this.Minor.get()));
    if (this.Patch.isPresent()) this.setPatch(visitor.postVisitDeepInteger(this.Patch.get()));
    if (this.Suffix.isPresent()) this.setSuffix(visitor.postVisitDeepString(this.Suffix.get()));
    return this.postVisitShallow(visitor);
  }
}
