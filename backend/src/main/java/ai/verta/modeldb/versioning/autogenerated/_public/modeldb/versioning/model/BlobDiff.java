// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class BlobDiff implements ProtoType {
  public Optional<List<String>> Location;
  public Optional<DiffStatusEnumDiffStatus> Status;
  public Optional<DatasetDiff> Dataset;
  public Optional<EnvironmentDiff> Environment;
  public Optional<CodeDiff> Code;
  public Optional<ConfigDiff> Config;

  public BlobDiff() {
    this.Location = Optional.empty();
    this.Status = Optional.empty();
    this.Dataset = Optional.empty();
    this.Environment = Optional.empty();
    this.Code = Optional.empty();
    this.Config = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Location.isPresent()) {
      return false;
    }
    if (this.Status.isPresent()) {
      return false;
    }
    if (this.Dataset.isPresent()) {
      return false;
    }
    if (this.Environment.isPresent()) {
      return false;
    }
    if (this.Code.isPresent()) {
      return false;
    }
    if (this.Config.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof BlobDiff)) return false;
    BlobDiff other = (BlobDiff) o;

    {
      Function3<List<String>, List<String>, Boolean> f =
          (x2, y2) ->
              IntStream.range(0, Math.min(x2.size(), y2.size()))
                  .mapToObj(
                      i -> {
                        Function3<String, String, Boolean> f2 = (x, y) -> x.equals(y);
                        return f2.apply(x2.get(i), y2.get(i));
                      })
                  .filter(x -> x != null)
                  .collect(Collectors.toList())
                  .isEmpty();
      if (this.Location.isPresent() || other.Location.isPresent()) {
        if (!this.Location.isPresent()) return false;
        if (other.Location.isPresent()) return false;
        if (!f.apply(this.Location.get(), other.Location.get())) return false;
      }
    }
    {
      Function3<DiffStatusEnumDiffStatus, DiffStatusEnumDiffStatus, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.Status.isPresent() || other.Status.isPresent()) {
        if (!this.Status.isPresent()) return false;
        if (other.Status.isPresent()) return false;
        if (!f.apply(this.Status.get(), other.Status.get())) return false;
      }
    }
    {
      Function3<DatasetDiff, DatasetDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Dataset.isPresent() || other.Dataset.isPresent()) {
        if (!this.Dataset.isPresent()) return false;
        if (other.Dataset.isPresent()) return false;
        if (!f.apply(this.Dataset.get(), other.Dataset.get())) return false;
      }
    }
    {
      Function3<EnvironmentDiff, EnvironmentDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Environment.isPresent() || other.Environment.isPresent()) {
        if (!this.Environment.isPresent()) return false;
        if (other.Environment.isPresent()) return false;
        if (!f.apply(this.Environment.get(), other.Environment.get())) return false;
      }
    }
    {
      Function3<CodeDiff, CodeDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Code.isPresent() || other.Code.isPresent()) {
        if (!this.Code.isPresent()) return false;
        if (other.Code.isPresent()) return false;
        if (!f.apply(this.Code.get(), other.Code.get())) return false;
      }
    }
    {
      Function3<ConfigDiff, ConfigDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Config.isPresent() || other.Config.isPresent()) {
        if (!this.Config.isPresent()) return false;
        if (other.Config.isPresent()) return false;
        if (!f.apply(this.Config.get(), other.Config.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        this.Location, this.Status, this.Dataset, this.Environment, this.Code, this.Config);
  }

  public BlobDiff setLocation(Optional<List<String>> value) {
    this.Location = value;
    return this;
  }

  public BlobDiff setLocation(List<String> value) {
    if (value == null) this.Location = Optional.empty();
    else this.Location = Optional.of(value);
    return this;
  }

  public BlobDiff setStatus(Optional<DiffStatusEnumDiffStatus> value) {
    this.Status = value;
    return this;
  }

  public BlobDiff setStatus(DiffStatusEnumDiffStatus value) {
    if (value == null) this.Status = Optional.empty();
    else this.Status = Optional.of(value);
    return this;
  }

  public BlobDiff setDataset(Optional<DatasetDiff> value) {
    this.Dataset = value;
    return this;
  }

  public BlobDiff setDataset(DatasetDiff value) {
    if (value == null) this.Dataset = Optional.empty();
    else this.Dataset = Optional.of(value);
    return this;
  }

  public BlobDiff setEnvironment(Optional<EnvironmentDiff> value) {
    this.Environment = value;
    return this;
  }

  public BlobDiff setEnvironment(EnvironmentDiff value) {
    if (value == null) this.Environment = Optional.empty();
    else this.Environment = Optional.of(value);
    return this;
  }

  public BlobDiff setCode(Optional<CodeDiff> value) {
    this.Code = value;
    return this;
  }

  public BlobDiff setCode(CodeDiff value) {
    if (value == null) this.Code = Optional.empty();
    else this.Code = Optional.of(value);
    return this;
  }

  public BlobDiff setConfig(Optional<ConfigDiff> value) {
    this.Config = value;
    return this;
  }

  public BlobDiff setConfig(ConfigDiff value) {
    if (value == null) this.Config = Optional.empty();
    else this.Config = Optional.of(value);
    return this;
  }

  public static BlobDiff fromProto(ai.verta.modeldb.versioning.BlobDiff blob) {
    if (blob == null) {
      return null;
    }

    BlobDiff obj = new BlobDiff();
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, List<String>> f = x -> blob.getLocationList();
      obj.Location = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, DiffStatusEnumDiffStatus> f =
          x -> DiffStatusEnumDiffStatus.fromProto(blob.getStatus());
      obj.Status = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, DatasetDiff> f =
          x -> DatasetDiff.fromProto(blob.getDataset());
      obj.Dataset = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, EnvironmentDiff> f =
          x -> EnvironmentDiff.fromProto(blob.getEnvironment());
      obj.Environment = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, CodeDiff> f =
          x -> CodeDiff.fromProto(blob.getCode());
      obj.Code = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.BlobDiff, ConfigDiff> f =
          x -> ConfigDiff.fromProto(blob.getConfig());
      obj.Config = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.BlobDiff.Builder toProto() {
    ai.verta.modeldb.versioning.BlobDiff.Builder builder =
        ai.verta.modeldb.versioning.BlobDiff.newBuilder();
    this.Location.ifPresent(x -> builder.addAllLocation(x));
    this.Status.ifPresent(x -> builder.setStatus(x.toProto()));
    this.Dataset.ifPresent(x -> builder.setDataset(x.toProto()));
    this.Environment.ifPresent(x -> builder.setEnvironment(x.toProto()));
    this.Code.ifPresent(x -> builder.setCode(x.toProto()));
    this.Config.ifPresent(x -> builder.setConfig(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitBlobDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Location.isPresent()) visitor.preVisitDeepListOfString(this.Location.get());
    if (this.Status.isPresent()) visitor.preVisitDeepDiffStatusEnumDiffStatus(this.Status.get());
    if (this.Dataset.isPresent()) visitor.preVisitDeepDatasetDiff(this.Dataset.get());
    if (this.Environment.isPresent()) visitor.preVisitDeepEnvironmentDiff(this.Environment.get());
    if (this.Code.isPresent()) visitor.preVisitDeepCodeDiff(this.Code.get());
    if (this.Config.isPresent()) visitor.preVisitDeepConfigDiff(this.Config.get());
  }

  public BlobDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitBlobDiff(this);
  }

  public BlobDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Location.isPresent())
      this.setLocation(visitor.postVisitDeepListOfString(this.Location.get()));
    if (this.Status.isPresent())
      this.setStatus(visitor.postVisitDeepDiffStatusEnumDiffStatus(this.Status.get()));
    if (this.Dataset.isPresent())
      this.setDataset(visitor.postVisitDeepDatasetDiff(this.Dataset.get()));
    if (this.Environment.isPresent())
      this.setEnvironment(visitor.postVisitDeepEnvironmentDiff(this.Environment.get()));
    if (this.Code.isPresent()) this.setCode(visitor.postVisitDeepCodeDiff(this.Code.get()));
    if (this.Config.isPresent()) this.setConfig(visitor.postVisitDeepConfigDiff(this.Config.get()));
    return this.postVisitShallow(visitor);
  }
}
