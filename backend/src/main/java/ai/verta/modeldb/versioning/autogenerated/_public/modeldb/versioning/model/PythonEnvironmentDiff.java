// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class PythonEnvironmentDiff implements ProtoType {
  public Optional<VersionEnvironmentDiff> Version;
  public Optional<List<PythonRequirementEnvironmentDiff>> Requirements;
  public Optional<List<PythonRequirementEnvironmentDiff>> Constraints;

  public PythonEnvironmentDiff() {
    this.Version = Optional.empty();
    this.Requirements = Optional.empty();
    this.Constraints = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Version.isPresent()) {
      return false;
    }
    if (this.Requirements.isPresent()) {
      return false;
    }
    if (this.Constraints.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof PythonEnvironmentDiff)) return false;
    PythonEnvironmentDiff other = (PythonEnvironmentDiff) o;

    {
      Function3<VersionEnvironmentDiff, VersionEnvironmentDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Version.isPresent() || other.Version.isPresent()) {
        if (!this.Version.isPresent()) return false;
        if (other.Version.isPresent()) return false;
        if (!f.apply(this.Version.get(), other.Version.get())) return false;
      }
    }
    {
      Function3<
              List<PythonRequirementEnvironmentDiff>,
              List<PythonRequirementEnvironmentDiff>,
              Boolean>
          f =
              (x2, y2) ->
                  IntStream.range(0, Math.min(x2.size(), y2.size()))
                      .mapToObj(
                          i -> {
                            Function3<
                                    PythonRequirementEnvironmentDiff,
                                    PythonRequirementEnvironmentDiff,
                                    Boolean>
                                f2 = (x, y) -> x.equals(y);
                            return f2.apply(x2.get(i), y2.get(i));
                          })
                      .filter(x -> x != null)
                      .collect(Collectors.toList())
                      .isEmpty();
      if (this.Requirements.isPresent() || other.Requirements.isPresent()) {
        if (!this.Requirements.isPresent()) return false;
        if (other.Requirements.isPresent()) return false;
        if (!f.apply(this.Requirements.get(), other.Requirements.get())) return false;
      }
    }
    {
      Function3<
              List<PythonRequirementEnvironmentDiff>,
              List<PythonRequirementEnvironmentDiff>,
              Boolean>
          f =
              (x2, y2) ->
                  IntStream.range(0, Math.min(x2.size(), y2.size()))
                      .mapToObj(
                          i -> {
                            Function3<
                                    PythonRequirementEnvironmentDiff,
                                    PythonRequirementEnvironmentDiff,
                                    Boolean>
                                f2 = (x, y) -> x.equals(y);
                            return f2.apply(x2.get(i), y2.get(i));
                          })
                      .filter(x -> x != null)
                      .collect(Collectors.toList())
                      .isEmpty();
      if (this.Constraints.isPresent() || other.Constraints.isPresent()) {
        if (!this.Constraints.isPresent()) return false;
        if (other.Constraints.isPresent()) return false;
        if (!f.apply(this.Constraints.get(), other.Constraints.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Version, this.Requirements, this.Constraints);
  }

  public PythonEnvironmentDiff setVersion(Optional<VersionEnvironmentDiff> value) {
    this.Version = value;
    return this;
  }

  public PythonEnvironmentDiff setVersion(VersionEnvironmentDiff value) {
    if (value == null) this.Version = Optional.empty();
    else this.Version = Optional.of(value);
    return this;
  }

  public PythonEnvironmentDiff setRequirements(
      Optional<List<PythonRequirementEnvironmentDiff>> value) {
    this.Requirements = value;
    return this;
  }

  public PythonEnvironmentDiff setRequirements(List<PythonRequirementEnvironmentDiff> value) {
    if (value == null) this.Requirements = Optional.empty();
    else this.Requirements = Optional.of(value);
    return this;
  }

  public PythonEnvironmentDiff setConstraints(
      Optional<List<PythonRequirementEnvironmentDiff>> value) {
    this.Constraints = value;
    return this;
  }

  public PythonEnvironmentDiff setConstraints(List<PythonRequirementEnvironmentDiff> value) {
    if (value == null) this.Constraints = Optional.empty();
    else this.Constraints = Optional.of(value);
    return this;
  }

  public static PythonEnvironmentDiff fromProto(
      ai.verta.modeldb.versioning.PythonEnvironmentDiff blob) {
    if (blob == null) {
      return null;
    }

    PythonEnvironmentDiff obj = new PythonEnvironmentDiff();
    {
      Function<ai.verta.modeldb.versioning.PythonEnvironmentDiff, VersionEnvironmentDiff> f =
          x -> VersionEnvironmentDiff.fromProto(blob.getVersion());
      obj.Version = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.PythonEnvironmentDiff,
              List<PythonRequirementEnvironmentDiff>>
          f =
              x ->
                  blob.getRequirementsList().stream()
                      .map(PythonRequirementEnvironmentDiff::fromProto)
                      .collect(Collectors.toList());
      obj.Requirements = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.PythonEnvironmentDiff,
              List<PythonRequirementEnvironmentDiff>>
          f =
              x ->
                  blob.getConstraintsList().stream()
                      .map(PythonRequirementEnvironmentDiff::fromProto)
                      .collect(Collectors.toList());
      obj.Constraints = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.PythonEnvironmentDiff.Builder toProto() {
    ai.verta.modeldb.versioning.PythonEnvironmentDiff.Builder builder =
        ai.verta.modeldb.versioning.PythonEnvironmentDiff.newBuilder();
    this.Version.ifPresent(x -> builder.setVersion(x.toProto()));
    this.Requirements.ifPresent(
        x ->
            builder.addAllRequirements(
                x.stream().map(y -> y.toProto().build()).collect(Collectors.toList())));
    this.Constraints.ifPresent(
        x ->
            builder.addAllConstraints(
                x.stream().map(y -> y.toProto().build()).collect(Collectors.toList())));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitPythonEnvironmentDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Version.isPresent()) visitor.preVisitDeepVersionEnvironmentDiff(this.Version.get());
    if (this.Requirements.isPresent())
      visitor.preVisitDeepListOfPythonRequirementEnvironmentDiff(this.Requirements.get());
    if (this.Constraints.isPresent())
      visitor.preVisitDeepListOfPythonRequirementEnvironmentDiff(this.Constraints.get());
  }

  public PythonEnvironmentDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitPythonEnvironmentDiff(this);
  }

  public PythonEnvironmentDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Version.isPresent())
      this.setVersion(visitor.postVisitDeepVersionEnvironmentDiff(this.Version.get()));
    if (this.Requirements.isPresent())
      this.setRequirements(
          visitor.postVisitDeepListOfPythonRequirementEnvironmentDiff(this.Requirements.get()));
    if (this.Constraints.isPresent())
      this.setConstraints(
          visitor.postVisitDeepListOfPythonRequirementEnvironmentDiff(this.Constraints.get()));
    return this.postVisitShallow(visitor);
  }
}
