// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class S3DatasetDiff {
    public List<S3DatasetComponentBlob> A;
    public List<S3DatasetComponentBlob> B;

    public S3DatasetDiff() {
        this.A = null;
        this.B = null;
    }

    public S3DatasetDiff setA(List<S3DatasetComponentBlob> value) {
        this.A = value;
        return this;
    }
    public S3DatasetDiff setB(List<S3DatasetComponentBlob> value) {
        this.B = value;
        return this;
    }

    static public S3DatasetDiff fromProto(ai.verta.modeldb.versioning.S3DatasetDiff blob) {
        if (blob == null) {
            return null;
        }

        S3DatasetDiff obj = new S3DatasetDiff();
        {
            Function<ai.verta.modeldb.versioning.S3DatasetDiff,List<S3DatasetComponentBlob>> f = x -> blob.getAList().stream().map(S3DatasetComponentBlob::fromProto).collect(Collectors.toList());
            obj.A = f.apply(blob);
        }
        {
            Function<ai.verta.modeldb.versioning.S3DatasetDiff,List<S3DatasetComponentBlob>> f = x -> blob.getBList().stream().map(S3DatasetComponentBlob::fromProto).collect(Collectors.toList());
            obj.B = f.apply(blob);
        }
        return obj;
    }

    public ai.verta.modeldb.versioning.S3DatasetDiff.Builder toProto() {
        ai.verta.modeldb.versioning.S3DatasetDiff.Builder builder = ai.verta.modeldb.versioning.S3DatasetDiff.newBuilder();
        {
            if (this.A != null) {
                Function<ai.verta.modeldb.versioning.S3DatasetDiff.Builder,Void> f = x -> { builder.addAllA(this.A.stream().map(y -> y.toProto().build()).collect(Collectors.toList())); return null; };
                f.apply(builder);
            }
        }
        {
            if (this.B != null) {
                Function<ai.verta.modeldb.versioning.S3DatasetDiff.Builder,Void> f = x -> { builder.addAllB(this.B.stream().map(y -> y.toProto().build()).collect(Collectors.toList())); return null; };
                f.apply(builder);
            }
        }
        return builder;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisitS3DatasetDiff(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        visitor.preVisitDeepListOfS3DatasetComponentBlob(this.A);
        visitor.preVisitDeepListOfS3DatasetComponentBlob(this.B);
    }

    public S3DatasetDiff postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisitS3DatasetDiff(this);
    }

    public S3DatasetDiff postVisitDeep(Visitor visitor) throws ModelDBException {
        this.A = visitor.postVisitDeepListOfS3DatasetComponentBlob(this.A);
        this.B = visitor.postVisitDeepListOfS3DatasetComponentBlob(this.B);
        return this.postVisitShallow(visitor);
    }
}
