package ai.verta.modeldb.versioning.blob.diff;

import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.diff.ProtoType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

// TODO: autogenerate?
// TODO: equal comparison should compare just immediate A and B, instead of recursing. This happens because some diff types are not isolated
public class DiffComputer {
    static public <T extends ProtoType> T nullIfEmpty(T obj) {
        if (obj.isEmpty())
            return null;
        return obj;
    }

    static public <T,T2> T2 getOrNull(T v, Function<T, T2> getter) {
        if (v == null) {
            return null;
        }
        return getter.apply(v);
    }

    static public <B,F,R> R computeDiff(B a, B b, Function<B,F> getter, Function3<F,F,R> computer) {
        return computer.apply(getOrNull(a, getter), getOrNull(b, getter));
    }

    // This applies an algorithm similar to what I discussed with Ravi for merges: gather sets based on a key
    // 1. if there is a key collision and both sets have size 1, then compute the diff of those elements
    // 2. if there is a key collision and both sets have more than 1 element, consider all A as removal and B as addition, ignoring any modifications (by passing null values)
    // 3. if there is no key collision, then just process the right side
    static public <B,F,R extends ProtoType> List<R> computeListDiff(B a, B b, Function<B,List<F>> getter, Function<F,String> hasher, Function3<F,F,R> computer) {
        HashMap<String, HashSet<F>> mapA = new HashMap<>();
        HashMap<String, HashSet<F>> mapB = new HashMap<>();
        List<F> fa = getter.apply(a);
        if (fa != null)
            fa.forEach(el -> { if (el != null) mapA.getOrDefault(hasher.apply(el), new HashSet<>()).add(el); });
        List<F> fb = getter.apply(b);
        if (fb != null)
            fb.forEach(el -> { if (el != null) mapB.getOrDefault(hasher.apply(el), new HashSet<>()).add(el); });

        HashSet<String> keys = new HashSet<>();
        keys.addAll(mapA.keySet());
        keys.addAll(mapB.keySet());

        List<R> ret = keys.stream().flatMap(key -> {
            HashSet<F> elA = mapA.get(key);
            HashSet<F> elB = mapB.get(key);
            // Key collision and one element, process it
            if (elA != null && elB != null && elA.size() == 1 && elB.size() == 1) {
                return Stream.of(computer.apply(elA.iterator().next(), elB.iterator().next()));
            }

            // Key collision and more elements, consider removal + addition
            if (elA != null && elB != null) {
                return Stream.concat(
                        elA.stream().map(el -> computer.apply(el, null)),
                        elB.stream().map(el -> computer.apply(null, el))
                );
            }
            else if (elA != null) {
                return elA.stream().map(el -> computer.apply(el, null));
            }
            else {
                return elB.stream().map(el -> computer.apply(null, el));
            }
        })
                .map(x -> nullIfEmpty(x))
                .filter(x -> x != null) // Remove elements that became null in the process of computing the diff for some reason
                .collect(Collectors.toList());

        if (ret.isEmpty()) {
            return null;
        }
        return ret;
    }

    static public <T> DiffStatusEnumDiffStatus getStatus(T a, T b) {
        if (a == null && b == null) {
            return new DiffStatusEnumDiffStatus(DiffStatus.DELETED);
        }
        if (a == null) {
            return new DiffStatusEnumDiffStatus(DiffStatus.ADDED);
        }
        if (b == null) {
            return new DiffStatusEnumDiffStatus(DiffStatus.DELETED);
        }
        return new DiffStatusEnumDiffStatus(DiffStatus.MODIFIED);
    }

    static public BlobDiff computeBlobDiff(Blob a, Blob b) {
        return nullIfEmpty(
                new BlobDiff()
                .setCode(computeDiff(a, b, x -> x.Code, DiffComputer::computeCodeDiff))
                .setConfig(computeDiff(a, b, x -> x.Config, DiffComputer::computeConfigDiff))
                .setDataset(computeDiff(a, b, x -> x.Dataset, DiffComputer::computeDatasetDiff))
                .setEnvironment(computeDiff(a, b, x -> x.Environment, DiffComputer::computeEnvironmentDiff))
        );
    }

    static public CodeDiff computeCodeDiff(CodeBlob a, CodeBlob b) {
        return nullIfEmpty(
                new CodeDiff()
                .setGit(computeDiff(a, b, x -> x.Git, DiffComputer::computeGitCodeDiff))
                .setNotebook(computeDiff(a, b, x -> x.Notebook, DiffComputer::computeNotebookCodeDiff))
        );
    }

    static public GitCodeDiff computeGitCodeDiff(GitCodeBlob a, GitCodeBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;

        return nullIfEmpty(
                new GitCodeDiff()
                .setA(a)
                .setB(b)
                .setStatus(getStatus(a,b))
        );
    }

    static public NotebookCodeDiff computeNotebookCodeDiff(NotebookCodeBlob a, NotebookCodeBlob b) {
        return nullIfEmpty(
                new NotebookCodeDiff()
                .setGitRepo(computeDiff(a, b, x -> x.GitRepo, DiffComputer::computeGitCodeDiff))
                .setPath(computeDiff(a, b, x -> x.Path, DiffComputer::computePathDatasetComponentDiff))
        );
    }

    static public ConfigDiff computeConfigDiff(ConfigBlob a, ConfigBlob b) {
        return nullIfEmpty(
                new ConfigDiff()
                .setHyperparameters(computeListDiff(a, b, x -> x.Hyperparameters, x -> x.Name, DiffComputer::computeHyperparameterConfigDiff))
                .setHyperparameterSet(computeListDiff(a, b, x -> x.HyperparameterSet, x -> x.Name, DiffComputer::computeHyperparameterSetConfigDiff))
        );
    }

    static public HyperparameterConfigDiff computeHyperparameterConfigDiff(HyperparameterConfigBlob a, HyperparameterConfigBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;
        String name = a != null ? a.Name : b.Name;
        return nullIfEmpty(
                new HyperparameterConfigDiff()
                .setName(name)
                .setA(getOrNull(a, x -> x.Value))
                .setB(getOrNull(b, x -> x.Value))
                .setStatus(getStatus(a, b))
        );
    }

    static public HyperparameterSetConfigDiff computeHyperparameterSetConfigDiff(HyperparameterSetConfigBlob a, HyperparameterSetConfigBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;
        String name = a != null ? a.Name : b.Name;
        return nullIfEmpty(
                new HyperparameterSetConfigDiff()
                .setName(name)
                .setContinuousA(getOrNull(a, x -> x.Continuous))
                .setContinuousB(getOrNull(b, x -> x.Continuous))
                .setDiscreteA(getOrNull(a, x -> x.Discrete))
                .setDiscreteB(getOrNull(b, x -> x.Discrete))
                .setStatus(getStatus(a, b))
        );
    }

    static public DatasetDiff computeDatasetDiff(DatasetBlob a, DatasetBlob b) {
        return nullIfEmpty(
                new DatasetDiff()
                .setPath(computeDiff(a, b, x -> x.Path, DiffComputer::computePathDatasetDiff))
                .setS3(computeDiff(a, b, x -> x.S3, DiffComputer::computeS3DatasetDiff))
        );
    }

    static public PathDatasetDiff computePathDatasetDiff(PathDatasetBlob a, PathDatasetBlob b) {
        return nullIfEmpty(
                new PathDatasetDiff()
                .setComponents(computeListDiff(a, b, x -> x.Components, x -> x.Path, DiffComputer::computePathDatasetComponentDiff))
        );
    }

    static public PathDatasetComponentDiff computePathDatasetComponentDiff(PathDatasetComponentBlob a, PathDatasetComponentBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;
        return nullIfEmpty(
                new PathDatasetComponentDiff()
                .setA(a)
                .setB(b)
                .setStatus(getStatus(a, b))
        );
    }

    static public S3DatasetDiff computeS3DatasetDiff(S3DatasetBlob a, S3DatasetBlob b) {
        return nullIfEmpty(
                new S3DatasetDiff()
                .setComponents(computeListDiff(a, b, x -> x.Components, x -> x.Path.Path, DiffComputer::computeS3DatasetComponentDiff))
        );
    }

    static public S3DatasetComponentDiff computeS3DatasetComponentDiff(S3DatasetComponentBlob a, S3DatasetComponentBlob b) {
        return nullIfEmpty(
                new S3DatasetComponentDiff()
                .setPath(computeDiff(a, b, x -> x.Path, DiffComputer::computePathDatasetComponentDiff))
        );
    }

    static public EnvironmentDiff computeEnvironmentDiff(EnvironmentBlob a, EnvironmentBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;
        return nullIfEmpty(
                new EnvironmentDiff()
                .setCommandLineA(getOrNull(a, x -> x.CommandLine))
                .setCommandLineB(getOrNull(b, x -> x.CommandLine))
                .setCommandLineStatus(getStatus(getOrNull(a, x -> x.CommandLine), getOrNull(b, x -> x.CommandLine)))
                .setDocker(computeDiff(a, b, x -> x.Docker, DiffComputer::computeDockerEnvironmentDiff))
                .setPython(computeDiff(a, b, x -> x.Python, DiffComputer::computePythonEnvironmentDiff))
                .setEnvironmentVariables(computeListDiff(a, b, x -> x.EnvironmentVariables, x -> x.Name, DiffComputer::computeEnvironmentVariablesDiff))
        );
    }

    static public DockerEnvironmentDiff computeDockerEnvironmentDiff(DockerEnvironmentBlob a, DockerEnvironmentBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;
        return nullIfEmpty(
                new DockerEnvironmentDiff()
                .setA(a)
                .setB(b)
                .setStatus(getStatus(a, b))
        );
    }

    static public PythonEnvironmentDiff computePythonEnvironmentDiff(PythonEnvironmentBlob a, PythonEnvironmentBlob b) {
        if (a.equals(b))
            return null;
        return nullIfEmpty(
                new PythonEnvironmentDiff()
                .setVersionA(getOrNull(a, x -> x.Version))
                .setVersionB(getOrNull(b, x -> x.Version))
                .setVersionStatus(getStatus(getOrNull(a, x -> x.Version), getOrNull(b, x -> x.Version)))
                .setConstraints(computeListDiff(a, b, x -> x.Constraints, x -> x.Library, DiffComputer::computePythonRequirementEnvironmentDiff))
                .setRequirements(computeListDiff(a, b, x -> x.Requirements, x -> x.Library, DiffComputer::computePythonRequirementEnvironmentDiff))
        );
    }

    public static PythonRequirementEnvironmentDiff computePythonRequirementEnvironmentDiff(PythonRequirementEnvironmentBlob a, PythonRequirementEnvironmentBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;

        return nullIfEmpty(
                new PythonRequirementEnvironmentDiff()
                .setA(a)
                .setB(b)
                .setStatus(getStatus(a, b))
        );
    }

    public static EnvironmentVariablesDiff computeEnvironmentVariablesDiff(EnvironmentVariablesBlob a, EnvironmentVariablesBlob b) {
        if (a == null && b == null)
            return null;
        if ((a != null && a.equals(b)) || (b != null && b.equals(a)))
            return null;

        String name = a != null ? a.Name : b.Name;
        return nullIfEmpty(
                new EnvironmentVariablesDiff()
                .setName(name)
                .setValueA(getOrNull(a, x -> x.Value))
                .setValueB(getOrNull(b, x -> x.Value))
                .setStatus(getStatus(a, b))
        );
    }
}
