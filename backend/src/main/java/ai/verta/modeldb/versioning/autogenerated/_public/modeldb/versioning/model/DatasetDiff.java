// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class DatasetDiff implements ProtoType {
  public Optional<S3DatasetDiff> S3;
  public Optional<PathDatasetDiff> Path;

  public DatasetDiff() {
    this.S3 = Optional.empty();
    this.Path = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.S3.isPresent()) {
      return false;
    }
    if (this.Path.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof DatasetDiff)) return false;
    DatasetDiff other = (DatasetDiff) o;

    {
      Function3<S3DatasetDiff, S3DatasetDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.S3.isPresent() || other.S3.isPresent()) {
        if (!this.S3.isPresent()) return false;
        if (other.S3.isPresent()) return false;
        if (!f.apply(this.S3.get(), other.S3.get())) return false;
      }
    }
    {
      Function3<PathDatasetDiff, PathDatasetDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Path.isPresent() || other.Path.isPresent()) {
        if (!this.Path.isPresent()) return false;
        if (other.Path.isPresent()) return false;
        if (!f.apply(this.Path.get(), other.Path.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.S3, this.Path);
  }

  public DatasetDiff setS3(Optional<S3DatasetDiff> value) {
    this.S3 = value;
    return this;
  }

  public DatasetDiff setS3(S3DatasetDiff value) {
    if (value == null) this.S3 = Optional.empty();
    else this.S3 = Optional.of(value);
    return this;
  }

  public DatasetDiff setPath(Optional<PathDatasetDiff> value) {
    this.Path = value;
    return this;
  }

  public DatasetDiff setPath(PathDatasetDiff value) {
    if (value == null) this.Path = Optional.empty();
    else this.Path = Optional.of(value);
    return this;
  }

  public static DatasetDiff fromProto(ai.verta.modeldb.versioning.DatasetDiff blob) {
    if (blob == null) {
      return null;
    }

    DatasetDiff obj = new DatasetDiff();
    {
      Function<ai.verta.modeldb.versioning.DatasetDiff, S3DatasetDiff> f =
          x -> S3DatasetDiff.fromProto(blob.getS3());
      obj.S3 = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.DatasetDiff, PathDatasetDiff> f =
          x -> PathDatasetDiff.fromProto(blob.getPath());
      obj.Path = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.DatasetDiff.Builder toProto() {
    ai.verta.modeldb.versioning.DatasetDiff.Builder builder =
        ai.verta.modeldb.versioning.DatasetDiff.newBuilder();
    this.S3.ifPresent(x -> builder.setS3(x.toProto()));
    this.Path.ifPresent(x -> builder.setPath(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitDatasetDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.S3.isPresent()) visitor.preVisitDeepS3DatasetDiff(this.S3.get());
    if (this.Path.isPresent()) visitor.preVisitDeepPathDatasetDiff(this.Path.get());
  }

  public DatasetDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitDatasetDiff(this);
  }

  public DatasetDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.S3.isPresent()) this.setS3(visitor.postVisitDeepS3DatasetDiff(this.S3.get()));
    if (this.Path.isPresent()) this.setPath(visitor.postVisitDeepPathDatasetDiff(this.Path.get()));
    return this.postVisitShallow(visitor);
  }
}
