// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class DatasetDiff {
    public S3DatasetDiff S3;
    public PathDatasetDiff Path;

    public DatasetDiff() {
        this.S3 = null;
        this.Path = null;
    }

    public DatasetDiff setS3(S3DatasetDiff value) {
        this.S3 = value;
        return this;
    }
    public DatasetDiff setPath(PathDatasetDiff value) {
        this.Path = value;
        return this;
    }

    static public DatasetDiff fromProto(ai.verta.modeldb.versioning.DatasetDiff blob) {
        DatasetDiff obj = new DatasetDiff();
        {
            Function<Void,S3DatasetDiff> f = x -> S3DatasetDiff.fromProto(blob.getS3());
            if (f != null) {
                obj.S3 = f.apply(null);
            }
        }
        {
            Function<Void,PathDatasetDiff> f = x -> PathDatasetDiff.fromProto(blob.getPath());
            if (f != null) {
                obj.Path = f.apply(null);
            }
        }
        return obj;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisit(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        {
            Function<S3DatasetDiff,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.S3);
            }
        }
        {
            Function<PathDatasetDiff,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.Path);
            }
        }
    }

    public DatasetDiff postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisit(this);
    }

    public DatasetDiff postVisitDeep(Visitor visitor) throws ModelDBException {
        {
            Function<S3DatasetDiff,S3DatasetDiff> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.S3 = f.apply(this.S3);
            }
        }
        {
            Function<PathDatasetDiff,PathDatasetDiff> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.Path = f.apply(this.Path);
            }
        }
        return this.postVisitShallow(visitor);
    }
}
