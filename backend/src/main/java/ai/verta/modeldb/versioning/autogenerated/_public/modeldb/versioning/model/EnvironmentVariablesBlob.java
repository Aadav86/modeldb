// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class EnvironmentVariablesBlob implements ProtoType {
  public Optional<String> Name;
  public Optional<String> Value;

  public EnvironmentVariablesBlob() {
    this.Name = Optional.empty();
    this.Value = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Name.isPresent()) {
      return false;
    }
    if (this.Value.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof EnvironmentVariablesBlob)) return false;
    EnvironmentVariablesBlob other = (EnvironmentVariablesBlob) o;

    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Name.isPresent() || other.Name.isPresent()) {
        if (!this.Name.isPresent()) return false;
        if (other.Name.isPresent()) return false;
        if (!f.apply(this.Name.get(), other.Name.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Value.isPresent() || other.Value.isPresent()) {
        if (!this.Value.isPresent()) return false;
        if (other.Value.isPresent()) return false;
        if (!f.apply(this.Value.get(), other.Value.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Name, this.Value);
  }

  public EnvironmentVariablesBlob setName(Optional<String> value) {
    this.Name = value;
    return this;
  }

  public EnvironmentVariablesBlob setName(String value) {
    if (value == null) this.Name = Optional.empty();
    else this.Name = Optional.of(value);
    return this;
  }

  public EnvironmentVariablesBlob setValue(Optional<String> value) {
    this.Value = value;
    return this;
  }

  public EnvironmentVariablesBlob setValue(String value) {
    if (value == null) this.Value = Optional.empty();
    else this.Value = Optional.of(value);
    return this;
  }

  public static EnvironmentVariablesBlob fromProto(
      ai.verta.modeldb.versioning.EnvironmentVariablesBlob blob) {
    if (blob == null) {
      return null;
    }

    EnvironmentVariablesBlob obj = new EnvironmentVariablesBlob();
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesBlob, String> f =
          x -> (blob.getName());
      obj.Name = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentVariablesBlob, String> f =
          x -> (blob.getValue());
      obj.Value = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.EnvironmentVariablesBlob.Builder toProto() {
    ai.verta.modeldb.versioning.EnvironmentVariablesBlob.Builder builder =
        ai.verta.modeldb.versioning.EnvironmentVariablesBlob.newBuilder();
    this.Name.ifPresent(x -> builder.setName(x));
    this.Value.ifPresent(x -> builder.setValue(x));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitEnvironmentVariablesBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Name.isPresent()) visitor.preVisitDeepString(this.Name.get());
    if (this.Value.isPresent()) visitor.preVisitDeepString(this.Value.get());
  }

  public EnvironmentVariablesBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitEnvironmentVariablesBlob(this);
  }

  public EnvironmentVariablesBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Name.isPresent()) this.setName(visitor.postVisitDeepString(this.Name.get()));
    if (this.Value.isPresent()) this.setValue(visitor.postVisitDeepString(this.Value.get()));
    return this.postVisitShallow(visitor);
  }
}
