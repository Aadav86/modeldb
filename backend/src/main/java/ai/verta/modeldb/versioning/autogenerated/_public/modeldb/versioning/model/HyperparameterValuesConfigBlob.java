// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class HyperparameterValuesConfigBlob implements ProtoType {
  public Optional<Long> IntValue;
  public Optional<Float> FloatValue;
  public Optional<String> StringValue;

  public HyperparameterValuesConfigBlob() {
    this.IntValue = Optional.empty();
    this.FloatValue = Optional.empty();
    this.StringValue = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.IntValue.isPresent()) {
      return false;
    }
    if (this.FloatValue.isPresent()) {
      return false;
    }
    if (this.StringValue.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof HyperparameterValuesConfigBlob)) return false;
    HyperparameterValuesConfigBlob other = (HyperparameterValuesConfigBlob) o;

    {
      Function3<Long, Long, Boolean> f = (x, y) -> x == y;
      if (this.IntValue.isPresent() || other.IntValue.isPresent()) {
        if (!this.IntValue.isPresent()) return false;
        if (other.IntValue.isPresent()) return false;
        if (!f.apply(this.IntValue.get(), other.IntValue.get())) return false;
      }
    }
    {
      Function3<Float, Float, Boolean> f = (x, y) -> x == y;
      if (this.FloatValue.isPresent() || other.FloatValue.isPresent()) {
        if (!this.FloatValue.isPresent()) return false;
        if (other.FloatValue.isPresent()) return false;
        if (!f.apply(this.FloatValue.get(), other.FloatValue.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.StringValue.isPresent() || other.StringValue.isPresent()) {
        if (!this.StringValue.isPresent()) return false;
        if (other.StringValue.isPresent()) return false;
        if (!f.apply(this.StringValue.get(), other.StringValue.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.IntValue, this.FloatValue, this.StringValue);
  }

  public HyperparameterValuesConfigBlob setIntValue(Optional<Long> value) {
    this.IntValue = value;
    return this;
  }

  public HyperparameterValuesConfigBlob setIntValue(Long value) {
    if (value == null) this.IntValue = Optional.empty();
    else this.IntValue = Optional.of(value);
    return this;
  }

  public HyperparameterValuesConfigBlob setFloatValue(Optional<Float> value) {
    this.FloatValue = value;
    return this;
  }

  public HyperparameterValuesConfigBlob setFloatValue(Float value) {
    if (value == null) this.FloatValue = Optional.empty();
    else this.FloatValue = Optional.of(value);
    return this;
  }

  public HyperparameterValuesConfigBlob setStringValue(Optional<String> value) {
    this.StringValue = value;
    return this;
  }

  public HyperparameterValuesConfigBlob setStringValue(String value) {
    if (value == null) this.StringValue = Optional.empty();
    else this.StringValue = Optional.of(value);
    return this;
  }

  public static HyperparameterValuesConfigBlob fromProto(
      ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob blob) {
    if (blob == null) {
      return null;
    }

    HyperparameterValuesConfigBlob obj = new HyperparameterValuesConfigBlob();
    {
      Function<ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob, Long> f =
          x -> (blob.getIntValue());
      obj.IntValue = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob, Float> f =
          x -> (blob.getFloatValue());
      obj.FloatValue = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob, String> f =
          x -> (blob.getStringValue());
      obj.StringValue = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob.Builder toProto() {
    ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob.Builder builder =
        ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob.newBuilder();
    this.IntValue.ifPresent(x -> builder.setIntValue(x));
    this.FloatValue.ifPresent(x -> builder.setFloatValue(x));
    this.StringValue.ifPresent(x -> builder.setStringValue(x));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitHyperparameterValuesConfigBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.IntValue.isPresent()) visitor.preVisitDeepLong(this.IntValue.get());
    if (this.FloatValue.isPresent()) visitor.preVisitDeepFloat(this.FloatValue.get());
    if (this.StringValue.isPresent()) visitor.preVisitDeepString(this.StringValue.get());
  }

  public HyperparameterValuesConfigBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitHyperparameterValuesConfigBlob(this);
  }

  public HyperparameterValuesConfigBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.IntValue.isPresent()) this.setIntValue(visitor.postVisitDeepLong(this.IntValue.get()));
    if (this.FloatValue.isPresent())
      this.setFloatValue(visitor.postVisitDeepFloat(this.FloatValue.get()));
    if (this.StringValue.isPresent())
      this.setStringValue(visitor.postVisitDeepString(this.StringValue.get()));
    return this.postVisitShallow(visitor);
  }
}
