// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class GitCodeBlob {
    public String Repo;
    public String Hash;
    public String Branch;
    public String Tag;
    public Boolean IsDirty;

    public GitCodeBlob() {
        this.Repo = null;
        this.Hash = null;
        this.Branch = null;
        this.Tag = null;
        this.IsDirty = false;
    }

    public GitCodeBlob setRepo(String value) {
        this.Repo = value;
        return this;
    }
    public GitCodeBlob setHash(String value) {
        this.Hash = value;
        return this;
    }
    public GitCodeBlob setBranch(String value) {
        this.Branch = value;
        return this;
    }
    public GitCodeBlob setTag(String value) {
        this.Tag = value;
        return this;
    }
    public GitCodeBlob setIsDirty(Boolean value) {
        this.IsDirty = value;
        return this;
    }

    static public GitCodeBlob fromProto(ai.verta.modeldb.versioning.GitCodeBlob blob) {
        GitCodeBlob obj = new GitCodeBlob();
        {
            Function<ai.verta.modeldb.versioning.GitCodeBlob,String> f = x -> { return (x.getRepo()); };
            //;
            if (f != null) {
                obj.Repo = f.apply(blob);
            }
        }
        {
            Function<ai.verta.modeldb.versioning.GitCodeBlob,String> f = x -> { return (x.getHash()); };
            //;
            if (f != null) {
                obj.Hash = f.apply(blob);
            }
        }
        {
            Function<ai.verta.modeldb.versioning.GitCodeBlob,String> f = x -> { return (x.getBranch()); };
            //;
            if (f != null) {
                obj.Branch = f.apply(blob);
            }
        }
        {
            Function<ai.verta.modeldb.versioning.GitCodeBlob,String> f = x -> { return (x.getTag()); };
            //;
            if (f != null) {
                obj.Tag = f.apply(blob);
            }
        }
        {
            Function<ai.verta.modeldb.versioning.GitCodeBlob,Boolean> f = x -> { return (x.getIsDirty()); };
            //;
            if (f != null) {
                obj.IsDirty = f.apply(blob);
            }
        }
        return obj;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisitGitCodeBlob(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        visitor.preVisitDeepString(this.Repo);
        visitor.preVisitDeepString(this.Hash);
        visitor.preVisitDeepString(this.Branch);
        visitor.preVisitDeepString(this.Tag);
        visitor.preVisitDeepBoolean(this.IsDirty);
    }

    public GitCodeBlob postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisitGitCodeBlob(this);
    }

    public GitCodeBlob postVisitDeep(Visitor visitor) throws ModelDBException {
        this.Repo = visitor.postVisitDeepString(this.Repo);
        this.Hash = visitor.postVisitDeepString(this.Hash);
        this.Branch = visitor.postVisitDeepString(this.Branch);
        this.Tag = visitor.postVisitDeepString(this.Tag);
        this.IsDirty = visitor.postVisitDeepBoolean(this.IsDirty);
        return this.postVisitShallow(visitor);
    }
}
