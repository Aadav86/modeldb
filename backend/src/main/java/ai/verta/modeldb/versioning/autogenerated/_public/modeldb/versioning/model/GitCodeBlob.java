// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class GitCodeBlob implements ProtoType {
  public Optional<String> Repo;
  public Optional<String> Hash;
  public Optional<String> Branch;
  public Optional<String> Tag;
  public Optional<Boolean> IsDirty;

  public GitCodeBlob() {
    this.Repo = Optional.empty();
    this.Hash = Optional.empty();
    this.Branch = Optional.empty();
    this.Tag = Optional.empty();
    this.IsDirty = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Repo.isPresent()) {
      return false;
    }
    if (this.Hash.isPresent()) {
      return false;
    }
    if (this.Branch.isPresent()) {
      return false;
    }
    if (this.Tag.isPresent()) {
      return false;
    }
    if (this.IsDirty.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof GitCodeBlob)) return false;
    GitCodeBlob other = (GitCodeBlob) o;

    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Repo.isPresent() || other.Repo.isPresent()) {
        if (!this.Repo.isPresent()) return false;
        if (other.Repo.isPresent()) return false;
        if (!f.apply(this.Repo.get(), other.Repo.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Hash.isPresent() || other.Hash.isPresent()) {
        if (!this.Hash.isPresent()) return false;
        if (other.Hash.isPresent()) return false;
        if (!f.apply(this.Hash.get(), other.Hash.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Branch.isPresent() || other.Branch.isPresent()) {
        if (!this.Branch.isPresent()) return false;
        if (other.Branch.isPresent()) return false;
        if (!f.apply(this.Branch.get(), other.Branch.get())) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Tag.isPresent() || other.Tag.isPresent()) {
        if (!this.Tag.isPresent()) return false;
        if (other.Tag.isPresent()) return false;
        if (!f.apply(this.Tag.get(), other.Tag.get())) return false;
      }
    }
    {
      Function3<Boolean, Boolean, Boolean> f = (x, y) -> x == y;
      if (this.IsDirty.isPresent() || other.IsDirty.isPresent()) {
        if (!this.IsDirty.isPresent()) return false;
        if (other.IsDirty.isPresent()) return false;
        if (!f.apply(this.IsDirty.get(), other.IsDirty.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Repo, this.Hash, this.Branch, this.Tag, this.IsDirty);
  }

  public GitCodeBlob setRepo(Optional<String> value) {
    this.Repo = value;
    return this;
  }

  public GitCodeBlob setRepo(String value) {
    if (value == null) this.Repo = Optional.empty();
    else this.Repo = Optional.of(value);
    return this;
  }

  public GitCodeBlob setHash(Optional<String> value) {
    this.Hash = value;
    return this;
  }

  public GitCodeBlob setHash(String value) {
    if (value == null) this.Hash = Optional.empty();
    else this.Hash = Optional.of(value);
    return this;
  }

  public GitCodeBlob setBranch(Optional<String> value) {
    this.Branch = value;
    return this;
  }

  public GitCodeBlob setBranch(String value) {
    if (value == null) this.Branch = Optional.empty();
    else this.Branch = Optional.of(value);
    return this;
  }

  public GitCodeBlob setTag(Optional<String> value) {
    this.Tag = value;
    return this;
  }

  public GitCodeBlob setTag(String value) {
    if (value == null) this.Tag = Optional.empty();
    else this.Tag = Optional.of(value);
    return this;
  }

  public GitCodeBlob setIsDirty(Optional<Boolean> value) {
    this.IsDirty = value;
    return this;
  }

  public GitCodeBlob setIsDirty(Boolean value) {
    if (value == null) this.IsDirty = Optional.empty();
    else this.IsDirty = Optional.of(value);
    return this;
  }

  public static GitCodeBlob fromProto(ai.verta.modeldb.versioning.GitCodeBlob blob) {
    if (blob == null) {
      return null;
    }

    GitCodeBlob obj = new GitCodeBlob();
    {
      Function<ai.verta.modeldb.versioning.GitCodeBlob, String> f = x -> (blob.getRepo());
      obj.Repo = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.GitCodeBlob, String> f = x -> (blob.getHash());
      obj.Hash = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.GitCodeBlob, String> f = x -> (blob.getBranch());
      obj.Branch = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.GitCodeBlob, String> f = x -> (blob.getTag());
      obj.Tag = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.GitCodeBlob, Boolean> f = x -> (blob.getIsDirty());
      obj.IsDirty = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.GitCodeBlob.Builder toProto() {
    ai.verta.modeldb.versioning.GitCodeBlob.Builder builder =
        ai.verta.modeldb.versioning.GitCodeBlob.newBuilder();
    this.Repo.ifPresent(x -> builder.setRepo(x));
    this.Hash.ifPresent(x -> builder.setHash(x));
    this.Branch.ifPresent(x -> builder.setBranch(x));
    this.Tag.ifPresent(x -> builder.setTag(x));
    this.IsDirty.ifPresent(x -> builder.setIsDirty(x));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitGitCodeBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Repo.isPresent()) visitor.preVisitDeepString(this.Repo.get());
    if (this.Hash.isPresent()) visitor.preVisitDeepString(this.Hash.get());
    if (this.Branch.isPresent()) visitor.preVisitDeepString(this.Branch.get());
    if (this.Tag.isPresent()) visitor.preVisitDeepString(this.Tag.get());
    if (this.IsDirty.isPresent()) visitor.preVisitDeepBoolean(this.IsDirty.get());
  }

  public GitCodeBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitGitCodeBlob(this);
  }

  public GitCodeBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Repo.isPresent()) this.setRepo(visitor.postVisitDeepString(this.Repo.get()));
    if (this.Hash.isPresent()) this.setHash(visitor.postVisitDeepString(this.Hash.get()));
    if (this.Branch.isPresent()) this.setBranch(visitor.postVisitDeepString(this.Branch.get()));
    if (this.Tag.isPresent()) this.setTag(visitor.postVisitDeepString(this.Tag.get()));
    if (this.IsDirty.isPresent()) this.setIsDirty(visitor.postVisitDeepBoolean(this.IsDirty.get()));
    return this.postVisitShallow(visitor);
  }
}
