// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class ConfigDiff {
    public HyperparameterSetConfigDiff HyperparameterSet;
    public HyperparameterConfigDiff Hyperparameters;

    public ConfigDiff() {
        this.HyperparameterSet = null;
        this.Hyperparameters = null;
    }

    public ConfigDiff setHyperparameterSet(HyperparameterSetConfigDiff value) {
        this.HyperparameterSet = value;
        return this;
    }
    public ConfigDiff setHyperparameters(HyperparameterConfigDiff value) {
        this.Hyperparameters = value;
        return this;
    }

    static public ConfigDiff fromProto(ai.verta.modeldb.versioning.ConfigDiff blob) {
        ConfigDiff obj = new ConfigDiff();
        {
            Function<Void,HyperparameterSetConfigDiff> f = x -> HyperparameterSetConfigDiff.fromProto(blob.getHyperparameterSet());
            if (f != null) {
                obj.HyperparameterSet = f.apply(null);
            }
        }
        {
            Function<Void,HyperparameterConfigDiff> f = x -> HyperparameterConfigDiff.fromProto(blob.getHyperparameters());
            if (f != null) {
                obj.Hyperparameters = f.apply(null);
            }
        }
        return obj;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisit(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        {
            Function<HyperparameterSetConfigDiff,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.HyperparameterSet);
            }
        }
        {
            Function<HyperparameterConfigDiff,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.Hyperparameters);
            }
        }
    }

    public ConfigDiff postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisit(this);
    }

    public ConfigDiff postVisitDeep(Visitor visitor) throws ModelDBException {
        {
            Function<HyperparameterSetConfigDiff,HyperparameterSetConfigDiff> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.HyperparameterSet = f.apply(this.HyperparameterSet);
            }
        }
        {
            Function<HyperparameterConfigDiff,HyperparameterConfigDiff> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.Hyperparameters = f.apply(this.Hyperparameters);
            }
        }
        return this.postVisitShallow(visitor);
    }
}
