// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class NotebookCodeDiff implements ProtoType {
  public Optional<PathDatasetComponentDiff> Path;
  public Optional<GitCodeDiff> GitRepo;

  public NotebookCodeDiff() {
    this.Path = Optional.empty();
    this.GitRepo = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Path.isPresent()) {
      return false;
    }
    if (this.GitRepo.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof NotebookCodeDiff)) return false;
    NotebookCodeDiff other = (NotebookCodeDiff) o;

    {
      Function3<PathDatasetComponentDiff, PathDatasetComponentDiff, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.Path.isPresent() || other.Path.isPresent()) {
        if (!this.Path.isPresent()) return false;
        if (other.Path.isPresent()) return false;
        if (!f.apply(this.Path.get(), other.Path.get())) return false;
      }
    }
    {
      Function3<GitCodeDiff, GitCodeDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.GitRepo.isPresent() || other.GitRepo.isPresent()) {
        if (!this.GitRepo.isPresent()) return false;
        if (other.GitRepo.isPresent()) return false;
        if (!f.apply(this.GitRepo.get(), other.GitRepo.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Path, this.GitRepo);
  }

  public NotebookCodeDiff setPath(Optional<PathDatasetComponentDiff> value) {
    this.Path = value;
    return this;
  }

  public NotebookCodeDiff setPath(PathDatasetComponentDiff value) {
    if (value == null) this.Path = Optional.empty();
    else this.Path = Optional.of(value);
    return this;
  }

  public NotebookCodeDiff setGitRepo(Optional<GitCodeDiff> value) {
    this.GitRepo = value;
    return this;
  }

  public NotebookCodeDiff setGitRepo(GitCodeDiff value) {
    if (value == null) this.GitRepo = Optional.empty();
    else this.GitRepo = Optional.of(value);
    return this;
  }

  public static NotebookCodeDiff fromProto(ai.verta.modeldb.versioning.NotebookCodeDiff blob) {
    if (blob == null) {
      return null;
    }

    NotebookCodeDiff obj = new NotebookCodeDiff();
    {
      Function<ai.verta.modeldb.versioning.NotebookCodeDiff, PathDatasetComponentDiff> f =
          x -> PathDatasetComponentDiff.fromProto(blob.getPath());
      obj.Path = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.NotebookCodeDiff, GitCodeDiff> f =
          x -> GitCodeDiff.fromProto(blob.getGitRepo());
      obj.GitRepo = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.NotebookCodeDiff.Builder toProto() {
    ai.verta.modeldb.versioning.NotebookCodeDiff.Builder builder =
        ai.verta.modeldb.versioning.NotebookCodeDiff.newBuilder();
    this.Path.ifPresent(x -> builder.setPath(x.toProto()));
    this.GitRepo.ifPresent(x -> builder.setGitRepo(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitNotebookCodeDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Path.isPresent()) visitor.preVisitDeepPathDatasetComponentDiff(this.Path.get());
    if (this.GitRepo.isPresent()) visitor.preVisitDeepGitCodeDiff(this.GitRepo.get());
  }

  public NotebookCodeDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitNotebookCodeDiff(this);
  }

  public NotebookCodeDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Path.isPresent())
      this.setPath(visitor.postVisitDeepPathDatasetComponentDiff(this.Path.get()));
    if (this.GitRepo.isPresent())
      this.setGitRepo(visitor.postVisitDeepGitCodeDiff(this.GitRepo.get()));
    return this.postVisitShallow(visitor);
  }
}
