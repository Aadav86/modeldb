// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class PathDatasetDiff implements ProtoType {
  public Optional<List<PathDatasetComponentDiff>> Components;

  public PathDatasetDiff() {
    this.Components = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Components.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof PathDatasetDiff)) return false;
    PathDatasetDiff other = (PathDatasetDiff) o;

    {
      Function3<List<PathDatasetComponentDiff>, List<PathDatasetComponentDiff>, Boolean> f =
          (x2, y2) ->
              IntStream.range(0, Math.min(x2.size(), y2.size()))
                  .mapToObj(
                      i -> {
                        Function3<PathDatasetComponentDiff, PathDatasetComponentDiff, Boolean> f2 =
                            (x, y) -> x.equals(y);
                        return f2.apply(x2.get(i), y2.get(i));
                      })
                  .filter(x -> x != null)
                  .collect(Collectors.toList())
                  .isEmpty();
      if (this.Components.isPresent() || other.Components.isPresent()) {
        if (!this.Components.isPresent()) return false;
        if (other.Components.isPresent()) return false;
        if (!f.apply(this.Components.get(), other.Components.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Components);
  }

  public PathDatasetDiff setComponents(Optional<List<PathDatasetComponentDiff>> value) {
    this.Components = value;
    return this;
  }

  public PathDatasetDiff setComponents(List<PathDatasetComponentDiff> value) {
    if (value == null) this.Components = Optional.empty();
    else this.Components = Optional.of(value);
    return this;
  }

  public static PathDatasetDiff fromProto(ai.verta.modeldb.versioning.PathDatasetDiff blob) {
    if (blob == null) {
      return null;
    }

    PathDatasetDiff obj = new PathDatasetDiff();
    {
      Function<ai.verta.modeldb.versioning.PathDatasetDiff, List<PathDatasetComponentDiff>> f =
          x ->
              blob.getComponentsList().stream()
                  .map(PathDatasetComponentDiff::fromProto)
                  .collect(Collectors.toList());
      obj.Components = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.PathDatasetDiff.Builder toProto() {
    ai.verta.modeldb.versioning.PathDatasetDiff.Builder builder =
        ai.verta.modeldb.versioning.PathDatasetDiff.newBuilder();
    this.Components.ifPresent(
        x ->
            builder.addAllComponents(
                x.stream().map(y -> y.toProto().build()).collect(Collectors.toList())));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitPathDatasetDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Components.isPresent())
      visitor.preVisitDeepListOfPathDatasetComponentDiff(this.Components.get());
  }

  public PathDatasetDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitPathDatasetDiff(this);
  }

  public PathDatasetDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Components.isPresent())
      this.setComponents(
          visitor.postVisitDeepListOfPathDatasetComponentDiff(this.Components.get()));
    return this.postVisitShallow(visitor);
  }
}
