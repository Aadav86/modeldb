// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class EnvironmentBlob {
    public PythonEnvironmentBlob Python;
    public DockerEnvironmentBlob Docker;
    public List<EnvironmentVariablesBlob> EnvironmentVariables;
    public List<String> CommandLine;

    public EnvironmentBlob() {
        this.Python = null;
        this.Docker = null;
        this.EnvironmentVariables = null;
        this.CommandLine = null;
    }

    public EnvironmentBlob setPython(PythonEnvironmentBlob value) {
        this.Python = value;
        return this;
    }
    public EnvironmentBlob setDocker(DockerEnvironmentBlob value) {
        this.Docker = value;
        return this;
    }
    public EnvironmentBlob setEnvironmentVariables(List<EnvironmentVariablesBlob> value) {
        this.EnvironmentVariables = value;
        return this;
    }
    public EnvironmentBlob setCommandLine(List<String> value) {
        this.CommandLine = value;
        return this;
    }

    static public EnvironmentBlob fromProto(ai.verta.modeldb.versioning.EnvironmentBlob blob) {
        EnvironmentBlob obj = new EnvironmentBlob();
        {
            Function<Void,PythonEnvironmentBlob> f = x -> PythonEnvironmentBlob.fromProto(blob.getPython());
            if (f != null) {
                obj.Python = f.apply(null);
            }
        }
        {
            Function<Void,DockerEnvironmentBlob> f = x -> DockerEnvironmentBlob.fromProto(blob.getDocker());
            if (f != null) {
                obj.Docker = f.apply(null);
            }
        }
        {
            Function<List<EnvironmentVariablesBlob>,List<EnvironmentVariablesBlob>> f = null;
            if (f != null) {
                obj.EnvironmentVariables = f.apply(null);
            }
        }
        {
            Function<List<String>,List<String>> f = null;
            if (f != null) {
                obj.CommandLine = f.apply(null);
            }
        }
        return obj;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisit(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        {
            Function<PythonEnvironmentBlob,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.Python);
            }
        }
        {
            Function<DockerEnvironmentBlob,Void> f = v -> {v.preVisitDeep(visitor); return null;};
            if (f != null) {
                f.apply(this.Docker);
            }
        }
        {
            Function<List<EnvironmentVariablesBlob>,Void> f = v -> {v.stream().forEach(s -> s.preVisitDeep(visitor)); return null;};
            if (f != null) {
                f.apply(this.EnvironmentVariables);
            }
        }
        {
            Function<List<String>,Void> f = v -> {v.stream().forEach(s -> s.preVisitDeep(visitor)); return null;};
            if (f != null) {
                f.apply(this.CommandLine);
            }
        }
    }

    public EnvironmentBlob postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisit(this);
    }

    public EnvironmentBlob postVisitDeep(Visitor visitor) throws ModelDBException {
        {
            Function<PythonEnvironmentBlob,PythonEnvironmentBlob> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.Python = f.apply(this.Python);
            }
        }
        {
            Function<DockerEnvironmentBlob,DockerEnvironmentBlob> f = v -> v.postVisitDeep(visitor);
            if (f != null) {
                this.Docker = f.apply(this.Docker);
            }
        }
        {
            Function<List<EnvironmentVariablesBlob>,List<EnvironmentVariablesBlob>> f = v -> v.stream().map(s -> s.postVisitDeep(visitor)).collect(Collectors.toList());
            if (f != null) {
                this.EnvironmentVariables = f.apply(this.EnvironmentVariables);
            }
        }
        {
            Function<List<String>,List<String>> f = v -> v.stream().map(s -> s.postVisitDeep(visitor)).collect(Collectors.toList());
            if (f != null) {
                this.CommandLine = f.apply(this.CommandLine);
            }
        }
        return this.postVisitShallow(visitor);
    }
}
