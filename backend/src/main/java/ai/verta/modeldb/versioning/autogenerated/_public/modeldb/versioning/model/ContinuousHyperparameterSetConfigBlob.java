// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class ContinuousHyperparameterSetConfigBlob implements ProtoType {
  public Optional<HyperparameterValuesConfigBlob> IntervalBegin;
  public Optional<HyperparameterValuesConfigBlob> IntervalEnd;
  public Optional<HyperparameterValuesConfigBlob> IntervalStep;

  public ContinuousHyperparameterSetConfigBlob() {
    this.IntervalBegin = Optional.empty();
    this.IntervalEnd = Optional.empty();
    this.IntervalStep = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.IntervalBegin.isPresent()) {
      return false;
    }
    if (this.IntervalEnd.isPresent()) {
      return false;
    }
    if (this.IntervalStep.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof ContinuousHyperparameterSetConfigBlob)) return false;
    ContinuousHyperparameterSetConfigBlob other = (ContinuousHyperparameterSetConfigBlob) o;

    {
      Function3<HyperparameterValuesConfigBlob, HyperparameterValuesConfigBlob, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.IntervalBegin.isPresent() || other.IntervalBegin.isPresent()) {
        if (!this.IntervalBegin.isPresent()) return false;
        if (other.IntervalBegin.isPresent()) return false;
        if (!f.apply(this.IntervalBegin.get(), other.IntervalBegin.get())) return false;
      }
    }
    {
      Function3<HyperparameterValuesConfigBlob, HyperparameterValuesConfigBlob, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.IntervalEnd.isPresent() || other.IntervalEnd.isPresent()) {
        if (!this.IntervalEnd.isPresent()) return false;
        if (other.IntervalEnd.isPresent()) return false;
        if (!f.apply(this.IntervalEnd.get(), other.IntervalEnd.get())) return false;
      }
    }
    {
      Function3<HyperparameterValuesConfigBlob, HyperparameterValuesConfigBlob, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.IntervalStep.isPresent() || other.IntervalStep.isPresent()) {
        if (!this.IntervalStep.isPresent()) return false;
        if (other.IntervalStep.isPresent()) return false;
        if (!f.apply(this.IntervalStep.get(), other.IntervalStep.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.IntervalBegin, this.IntervalEnd, this.IntervalStep);
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalBegin(
      Optional<HyperparameterValuesConfigBlob> value) {
    this.IntervalBegin = value;
    return this;
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalBegin(
      HyperparameterValuesConfigBlob value) {
    if (value == null) this.IntervalBegin = Optional.empty();
    else this.IntervalBegin = Optional.of(value);
    return this;
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalEnd(
      Optional<HyperparameterValuesConfigBlob> value) {
    this.IntervalEnd = value;
    return this;
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalEnd(
      HyperparameterValuesConfigBlob value) {
    if (value == null) this.IntervalEnd = Optional.empty();
    else this.IntervalEnd = Optional.of(value);
    return this;
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalStep(
      Optional<HyperparameterValuesConfigBlob> value) {
    this.IntervalStep = value;
    return this;
  }

  public ContinuousHyperparameterSetConfigBlob setIntervalStep(
      HyperparameterValuesConfigBlob value) {
    if (value == null) this.IntervalStep = Optional.empty();
    else this.IntervalStep = Optional.of(value);
    return this;
  }

  public static ContinuousHyperparameterSetConfigBlob fromProto(
      ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob blob) {
    if (blob == null) {
      return null;
    }

    ContinuousHyperparameterSetConfigBlob obj = new ContinuousHyperparameterSetConfigBlob();
    {
      Function<
              ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob,
              HyperparameterValuesConfigBlob>
          f = x -> HyperparameterValuesConfigBlob.fromProto(blob.getIntervalBegin());
      obj.IntervalBegin = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob,
              HyperparameterValuesConfigBlob>
          f = x -> HyperparameterValuesConfigBlob.fromProto(blob.getIntervalEnd());
      obj.IntervalEnd = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob,
              HyperparameterValuesConfigBlob>
          f = x -> HyperparameterValuesConfigBlob.fromProto(blob.getIntervalStep());
      obj.IntervalStep = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.Builder toProto() {
    ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.Builder builder =
        ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.newBuilder();
    this.IntervalBegin.ifPresent(x -> builder.setIntervalBegin(x.toProto()));
    this.IntervalEnd.ifPresent(x -> builder.setIntervalEnd(x.toProto()));
    this.IntervalStep.ifPresent(x -> builder.setIntervalStep(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitContinuousHyperparameterSetConfigBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.IntervalBegin.isPresent())
      visitor.preVisitDeepHyperparameterValuesConfigBlob(this.IntervalBegin.get());
    if (this.IntervalEnd.isPresent())
      visitor.preVisitDeepHyperparameterValuesConfigBlob(this.IntervalEnd.get());
    if (this.IntervalStep.isPresent())
      visitor.preVisitDeepHyperparameterValuesConfigBlob(this.IntervalStep.get());
  }

  public ContinuousHyperparameterSetConfigBlob postVisitShallow(Visitor visitor)
      throws ModelDBException {
    return visitor.postVisitContinuousHyperparameterSetConfigBlob(this);
  }

  public ContinuousHyperparameterSetConfigBlob postVisitDeep(Visitor visitor)
      throws ModelDBException {
    if (this.IntervalBegin.isPresent())
      this.setIntervalBegin(
          visitor.postVisitDeepHyperparameterValuesConfigBlob(this.IntervalBegin.get()));
    if (this.IntervalEnd.isPresent())
      this.setIntervalEnd(
          visitor.postVisitDeepHyperparameterValuesConfigBlob(this.IntervalEnd.get()));
    if (this.IntervalStep.isPresent())
      this.setIntervalStep(
          visitor.postVisitDeepHyperparameterValuesConfigBlob(this.IntervalStep.get()));
    return this.postVisitShallow(visitor);
  }
}
