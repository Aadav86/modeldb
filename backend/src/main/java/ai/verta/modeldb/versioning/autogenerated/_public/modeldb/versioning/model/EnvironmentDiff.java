// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.random.*;

public class EnvironmentDiff implements ProtoType {
    public PythonEnvironmentDiff Python;
    public DockerEnvironmentDiff Docker;
    public List<EnvironmentVariablesDiff> EnvironmentVariables;
    public CommandLineEnvironmentDiff CommandLine;

    public EnvironmentDiff() {
        this.Python = null;
        this.Docker = null;
        this.EnvironmentVariables = null;
        this.CommandLine = null;
    }

    public Boolean isEmpty() {
        if (this.Python != null && !this.Python.equals(null) ) {
            return false;
        }
        if (this.Docker != null && !this.Docker.equals(null) ) {
            return false;
        }
        if (this.EnvironmentVariables != null && !this.EnvironmentVariables.equals(null)  && !this.EnvironmentVariables.isEmpty()) {
            return false;
        }
        if (this.CommandLine != null && !this.CommandLine.equals(null) ) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "{\"class\": \"EnvironmentDiff\",\"fields\": {" +
                "\"Python\": " + Python + ", " +
                "\"Docker\": " + Docker + ", " +
                "\"EnvironmentVariables\": " + EnvironmentVariables + ", " +
                "\"CommandLine\": " + CommandLine + 
                "}}";
    }

    // TODO: not consider order on lists
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        if (!(o instanceof EnvironmentDiff)) return false;
        EnvironmentDiff other = (EnvironmentDiff) o;

        {
            Function3<PythonEnvironmentDiff,PythonEnvironmentDiff,Boolean> f = (x, y) -> x.equals(y);
            if (this.Python != null || other.Python != null) {
                if (this.Python == null && other.Python != null)
                    return false;
                if (this.Python != null && other.Python == null)
                    return false;
                if (!f.apply(this.Python, other.Python))
                    return false;
            }
        }
        {
            Function3<DockerEnvironmentDiff,DockerEnvironmentDiff,Boolean> f = (x, y) -> x.equals(y);
            if (this.Docker != null || other.Docker != null) {
                if (this.Docker == null && other.Docker != null)
                    return false;
                if (this.Docker != null && other.Docker == null)
                    return false;
                if (!f.apply(this.Docker, other.Docker))
                    return false;
            }
        }
        {
            Function3<List<EnvironmentVariablesDiff>,List<EnvironmentVariablesDiff>,Boolean> f = (x2, y2) -> IntStream.range(0, Math.min(x2.size(), y2.size())).mapToObj(i -> { Function3<EnvironmentVariablesDiff,EnvironmentVariablesDiff,Boolean> f2 = (x, y) -> x.equals(y); return f2.apply(x2.get(i), y2.get(i));}).filter(x -> x.equals(false)).collect(Collectors.toList()).isEmpty();
            if (this.EnvironmentVariables != null || other.EnvironmentVariables != null) {
                if (this.EnvironmentVariables == null && other.EnvironmentVariables != null)
                    return false;
                if (this.EnvironmentVariables != null && other.EnvironmentVariables == null)
                    return false;
                if (!f.apply(this.EnvironmentVariables, other.EnvironmentVariables))
                    return false;
            }
        }
        {
            Function3<CommandLineEnvironmentDiff,CommandLineEnvironmentDiff,Boolean> f = (x, y) -> x.equals(y);
            if (this.CommandLine != null || other.CommandLine != null) {
                if (this.CommandLine == null && other.CommandLine != null)
                    return false;
                if (this.CommandLine != null && other.CommandLine == null)
                    return false;
                if (!f.apply(this.CommandLine, other.CommandLine))
                    return false;
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
        this.Python,
        this.Docker,
        this.EnvironmentVariables,
        this.CommandLine
        );
      }

    public EnvironmentDiff setPython(PythonEnvironmentDiff value) {
        this.Python = Utils.removeEmpty(value);
        return this;
    }
    public EnvironmentDiff setDocker(DockerEnvironmentDiff value) {
        this.Docker = Utils.removeEmpty(value);
        return this;
    }
    public EnvironmentDiff setEnvironmentVariables(List<EnvironmentVariablesDiff> value) {
        this.EnvironmentVariables = Utils.removeEmpty(value);
        return this;
    }
    public EnvironmentDiff setCommandLine(CommandLineEnvironmentDiff value) {
        this.CommandLine = Utils.removeEmpty(value);
        return this;
    }

    static public EnvironmentDiff fromProto(ai.verta.modeldb.versioning.EnvironmentDiff blob) {
        if (blob == null) {
            return null;
        }

        EnvironmentDiff obj = new EnvironmentDiff();
        {
            Function<ai.verta.modeldb.versioning.EnvironmentDiff,PythonEnvironmentDiff> f = x -> PythonEnvironmentDiff.fromProto(blob.getPython());
            obj.Python = Utils.removeEmpty(f.apply(blob));
        }
        {
            Function<ai.verta.modeldb.versioning.EnvironmentDiff,DockerEnvironmentDiff> f = x -> DockerEnvironmentDiff.fromProto(blob.getDocker());
            obj.Docker = Utils.removeEmpty(f.apply(blob));
        }
        {
            Function<ai.verta.modeldb.versioning.EnvironmentDiff,List<EnvironmentVariablesDiff>> f = x -> blob.getEnvironmentVariablesList().stream().map(EnvironmentVariablesDiff::fromProto).collect(Collectors.toList());
            obj.EnvironmentVariables = Utils.removeEmpty(f.apply(blob));
        }
        {
            Function<ai.verta.modeldb.versioning.EnvironmentDiff,CommandLineEnvironmentDiff> f = x -> CommandLineEnvironmentDiff.fromProto(blob.getCommandLine());
            obj.CommandLine = Utils.removeEmpty(f.apply(blob));
        }
        return obj;
    }

    public ai.verta.modeldb.versioning.EnvironmentDiff.Builder toProto() {
        ai.verta.modeldb.versioning.EnvironmentDiff.Builder builder = ai.verta.modeldb.versioning.EnvironmentDiff.newBuilder();
        {
            if (this.Python != null && !this.Python.equals(null) ) {
                Function<ai.verta.modeldb.versioning.EnvironmentDiff.Builder,Void> f = x -> { builder.setPython(this.Python.toProto()); return null; };
                f.apply(builder);
            }
        }
        {
            if (this.Docker != null && !this.Docker.equals(null) ) {
                Function<ai.verta.modeldb.versioning.EnvironmentDiff.Builder,Void> f = x -> { builder.setDocker(this.Docker.toProto()); return null; };
                f.apply(builder);
            }
        }
        {
            if (this.EnvironmentVariables != null && !this.EnvironmentVariables.equals(null)  && !this.EnvironmentVariables.isEmpty()) {
                Function<ai.verta.modeldb.versioning.EnvironmentDiff.Builder,Void> f = x -> { builder.addAllEnvironmentVariables(this.EnvironmentVariables.stream().map(y -> y.toProto().build()).collect(Collectors.toList())); return null; };
                f.apply(builder);
            }
        }
        {
            if (this.CommandLine != null && !this.CommandLine.equals(null) ) {
                Function<ai.verta.modeldb.versioning.EnvironmentDiff.Builder,Void> f = x -> { builder.setCommandLine(this.CommandLine.toProto()); return null; };
                f.apply(builder);
            }
        }
        return builder;
    }

    public void preVisitShallow(Visitor visitor) throws ModelDBException {
        visitor.preVisitEnvironmentDiff(this);
    }

    public void preVisitDeep(Visitor visitor) throws ModelDBException {
        this.preVisitShallow(visitor);
        visitor.preVisitDeepPythonEnvironmentDiff(this.Python);
        visitor.preVisitDeepDockerEnvironmentDiff(this.Docker);
        visitor.preVisitDeepListOfEnvironmentVariablesDiff(this.EnvironmentVariables);
        visitor.preVisitDeepCommandLineEnvironmentDiff(this.CommandLine);
    }

    public EnvironmentDiff postVisitShallow(Visitor visitor) throws ModelDBException {
        return visitor.postVisitEnvironmentDiff(this);
    }

    public EnvironmentDiff postVisitDeep(Visitor visitor) throws ModelDBException {
        this.setPython(visitor.postVisitDeepPythonEnvironmentDiff(this.Python));
        this.setDocker(visitor.postVisitDeepDockerEnvironmentDiff(this.Docker));
        this.setEnvironmentVariables(visitor.postVisitDeepListOfEnvironmentVariablesDiff(this.EnvironmentVariables));
        this.setCommandLine(visitor.postVisitDeepCommandLineEnvironmentDiff(this.CommandLine));
        return this.postVisitShallow(visitor);
    }
}
