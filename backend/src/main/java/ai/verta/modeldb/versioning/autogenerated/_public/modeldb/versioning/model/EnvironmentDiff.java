// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class EnvironmentDiff implements ProtoType {
  public Optional<PythonEnvironmentDiff> Python;
  public Optional<DockerEnvironmentDiff> Docker;
  public Optional<List<EnvironmentVariablesDiff>> EnvironmentVariables;
  public Optional<CommandLineEnvironmentDiff> CommandLine;

  public EnvironmentDiff() {
    this.Python = Optional.empty();
    this.Docker = Optional.empty();
    this.EnvironmentVariables = Optional.empty();
    this.CommandLine = Optional.empty();
  }

  public Boolean isEmpty() {
    if (this.Python.isPresent()) {
      return false;
    }
    if (this.Docker.isPresent()) {
      return false;
    }
    if (this.EnvironmentVariables.isPresent()) {
      return false;
    }
    if (this.CommandLine.isPresent()) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof EnvironmentDiff)) return false;
    EnvironmentDiff other = (EnvironmentDiff) o;

    {
      Function3<PythonEnvironmentDiff, PythonEnvironmentDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Python.isPresent() || other.Python.isPresent()) {
        if (!this.Python.isPresent()) return false;
        if (other.Python.isPresent()) return false;
        if (!f.apply(this.Python.get(), other.Python.get())) return false;
      }
    }
    {
      Function3<DockerEnvironmentDiff, DockerEnvironmentDiff, Boolean> f = (x, y) -> x.equals(y);
      if (this.Docker.isPresent() || other.Docker.isPresent()) {
        if (!this.Docker.isPresent()) return false;
        if (other.Docker.isPresent()) return false;
        if (!f.apply(this.Docker.get(), other.Docker.get())) return false;
      }
    }
    {
      Function3<List<EnvironmentVariablesDiff>, List<EnvironmentVariablesDiff>, Boolean> f =
          (x2, y2) ->
              IntStream.range(0, Math.min(x2.size(), y2.size()))
                  .mapToObj(
                      i -> {
                        Function3<EnvironmentVariablesDiff, EnvironmentVariablesDiff, Boolean> f2 =
                            (x, y) -> x.equals(y);
                        return f2.apply(x2.get(i), y2.get(i));
                      })
                  .filter(x -> x != null)
                  .collect(Collectors.toList())
                  .isEmpty();
      if (this.EnvironmentVariables.isPresent() || other.EnvironmentVariables.isPresent()) {
        if (!this.EnvironmentVariables.isPresent()) return false;
        if (other.EnvironmentVariables.isPresent()) return false;
        if (!f.apply(this.EnvironmentVariables.get(), other.EnvironmentVariables.get()))
          return false;
      }
    }
    {
      Function3<CommandLineEnvironmentDiff, CommandLineEnvironmentDiff, Boolean> f =
          (x, y) -> x.equals(y);
      if (this.CommandLine.isPresent() || other.CommandLine.isPresent()) {
        if (!this.CommandLine.isPresent()) return false;
        if (other.CommandLine.isPresent()) return false;
        if (!f.apply(this.CommandLine.get(), other.CommandLine.get())) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Python, this.Docker, this.EnvironmentVariables, this.CommandLine);
  }

  public EnvironmentDiff setPython(Optional<PythonEnvironmentDiff> value) {
    this.Python = value;
    return this;
  }

  public EnvironmentDiff setPython(PythonEnvironmentDiff value) {
    if (value == null) this.Python = Optional.empty();
    else this.Python = Optional.of(value);
    return this;
  }

  public EnvironmentDiff setDocker(Optional<DockerEnvironmentDiff> value) {
    this.Docker = value;
    return this;
  }

  public EnvironmentDiff setDocker(DockerEnvironmentDiff value) {
    if (value == null) this.Docker = Optional.empty();
    else this.Docker = Optional.of(value);
    return this;
  }

  public EnvironmentDiff setEnvironmentVariables(Optional<List<EnvironmentVariablesDiff>> value) {
    this.EnvironmentVariables = value;
    return this;
  }

  public EnvironmentDiff setEnvironmentVariables(List<EnvironmentVariablesDiff> value) {
    if (value == null) this.EnvironmentVariables = Optional.empty();
    else this.EnvironmentVariables = Optional.of(value);
    return this;
  }

  public EnvironmentDiff setCommandLine(Optional<CommandLineEnvironmentDiff> value) {
    this.CommandLine = value;
    return this;
  }

  public EnvironmentDiff setCommandLine(CommandLineEnvironmentDiff value) {
    if (value == null) this.CommandLine = Optional.empty();
    else this.CommandLine = Optional.of(value);
    return this;
  }

  public static EnvironmentDiff fromProto(ai.verta.modeldb.versioning.EnvironmentDiff blob) {
    if (blob == null) {
      return null;
    }

    EnvironmentDiff obj = new EnvironmentDiff();
    {
      Function<ai.verta.modeldb.versioning.EnvironmentDiff, PythonEnvironmentDiff> f =
          x -> PythonEnvironmentDiff.fromProto(blob.getPython());
      obj.Python = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentDiff, DockerEnvironmentDiff> f =
          x -> DockerEnvironmentDiff.fromProto(blob.getDocker());
      obj.Docker = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentDiff, List<EnvironmentVariablesDiff>> f =
          x ->
              blob.getEnvironmentVariablesList().stream()
                  .map(EnvironmentVariablesDiff::fromProto)
                  .collect(Collectors.toList());
      obj.EnvironmentVariables = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.EnvironmentDiff, CommandLineEnvironmentDiff> f =
          x -> CommandLineEnvironmentDiff.fromProto(blob.getCommandLine());
      obj.CommandLine = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.EnvironmentDiff.Builder toProto() {
    ai.verta.modeldb.versioning.EnvironmentDiff.Builder builder =
        ai.verta.modeldb.versioning.EnvironmentDiff.newBuilder();
    this.Python.ifPresent(x -> builder.setPython(x.toProto()));
    this.Docker.ifPresent(x -> builder.setDocker(x.toProto()));
    this.EnvironmentVariables.ifPresent(
        x ->
            builder.addAllEnvironmentVariables(
                x.stream().map(y -> y.toProto().build()).collect(Collectors.toList())));
    this.CommandLine.ifPresent(x -> builder.setCommandLine(x.toProto()));
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitEnvironmentDiff(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    if (this.Python.isPresent()) visitor.preVisitDeepPythonEnvironmentDiff(this.Python.get());
    if (this.Docker.isPresent()) visitor.preVisitDeepDockerEnvironmentDiff(this.Docker.get());
    if (this.EnvironmentVariables.isPresent())
      visitor.preVisitDeepListOfEnvironmentVariablesDiff(this.EnvironmentVariables.get());
    if (this.CommandLine.isPresent())
      visitor.preVisitDeepCommandLineEnvironmentDiff(this.CommandLine.get());
  }

  public EnvironmentDiff postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitEnvironmentDiff(this);
  }

  public EnvironmentDiff postVisitDeep(Visitor visitor) throws ModelDBException {
    if (this.Python.isPresent())
      this.setPython(visitor.postVisitDeepPythonEnvironmentDiff(this.Python.get()));
    if (this.Docker.isPresent())
      this.setDocker(visitor.postVisitDeepDockerEnvironmentDiff(this.Docker.get()));
    if (this.EnvironmentVariables.isPresent())
      this.setEnvironmentVariables(
          visitor.postVisitDeepListOfEnvironmentVariablesDiff(this.EnvironmentVariables.get()));
    if (this.CommandLine.isPresent())
      this.setCommandLine(visitor.postVisitDeepCommandLineEnvironmentDiff(this.CommandLine.get()));
    return this.postVisitShallow(visitor);
  }
}
